<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>肖洒</title>
  <subtitle>静水流深,闻喧享静</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://x-nicolo.github.io/"/>
  <updated>2017-09-19T09:55:43.000Z</updated>
  <id>https://x-nicolo.github.io/</id>
  
  <author>
    <name>肖洒</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于OpenCV全景拼接（Python）</title>
    <link href="https://x-nicolo.github.io/2017/09/19/%E5%9F%BA%E4%BA%8EOpenCV%E5%85%A8%E6%99%AF%E6%8B%BC%E6%8E%A5%EF%BC%88Python%EF%BC%89/"/>
    <id>https://x-nicolo.github.io/2017/09/19/基于OpenCV全景拼接（Python）/</id>
    <published>2017-09-19T09:55:43.000Z</published>
    <updated>2017-09-19T09:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2847713-6a62bf8adc3c6f68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>基于OpenCV（Python）的图片拼接和全景图构建。 用两张有重叠区域的图来“缝合”创建一张全景图。构建全景图，利用到了计算机视觉和图像处理技术有：关键点检测、局部不变特征、关键点匹配、RANSAC(Random Sample Consensus)即随机采样一致性和透视变形。因为在处理关键点检测和局部不变性在OpenCV 2.4.X和OpenCV 3.X中有很大的不同，比如SIFT和SURF。这里将给出兼容两个版本的代码。在之后的博客会解决多张图片的拼接，而不仅仅只是针对两张图片。<br><a id="more"></a>  </p>
<h2 id="OpenCV全景拼接"><a href="#OpenCV全景拼接" class="headerlink" title="OpenCV全景拼接"></a>OpenCV全景拼接</h2><h3 id="全景拼接算法有四部分组成"><a href="#全景拼接算法有四部分组成" class="headerlink" title="全景拼接算法有四部分组成"></a>全景拼接算法有四部分组成</h3><ul>
<li>Step1:从输入的两张图片里检测关键点、提取局部不变特征。</li>
<li>Step2:匹配的两幅图像之间的特征</li>
<li>Step3:使用RANSAC算法利用匹配特征向量估计单应矩阵（homography matrix）。</li>
<li>Step4:利用Step3得到的单应矩阵应用扭曲变换。</li>
</ul>
<p>将所有的步骤都封装在panorama.py，定义一个Stitcher类来构建全图。Stitcher类将会依赖Python的包imutils，安装方法：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> imutils</div></pre></td></tr></table></figure></p>
<h3 id="关于panorama-py"><a href="#关于panorama-py" class="headerlink" title="关于panorama.py"></a>关于panorama.py</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># import the necessary packages</span></div><div class="line">import numpy as np</div><div class="line">import imutils</div><div class="line">import cv2</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stitcher</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">        <span class="comment"># determine if we are using OpenCV v3.X</span></div><div class="line">        <span class="keyword">self</span>.isv3 = imutils.is_cv3()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stitch</span><span class="params">(<span class="keyword">self</span>, images, ratio=<span class="number">0</span>.<span class="number">75</span>, reprojThresh=<span class="number">4.0</span>,</span></span></div><div class="line"><span class="function"><span class="params">        showMatches=False)</span></span><span class="symbol">:</span></div><div class="line">        <span class="comment"># unpack the images, then detect keypoints and extract</span></div><div class="line">        <span class="comment"># local invariant descriptors from them</span></div><div class="line">        (imageB, imageA) = images</div><div class="line">        (kpsA, featuresA) = <span class="keyword">self</span>.detectAndDescribe(imageA)</div><div class="line">        (kpsB, featuresB) = <span class="keyword">self</span>.detectAndDescribe(imageB)</div><div class="line"></div><div class="line">        <span class="comment"># match features between the two images</span></div><div class="line">        M = <span class="keyword">self</span>.matchKeypoints(kpsA, kpsB,</div><div class="line">            featuresA, featuresB, ratio, reprojThresh)</div><div class="line"></div><div class="line">        <span class="comment"># if the match is None, then there aren't enough matched</span></div><div class="line">        <span class="comment"># keypoints to create a panorama</span></div><div class="line">        <span class="keyword">if</span> M is <span class="symbol">None:</span></div><div class="line">            <span class="keyword">return</span> None</div><div class="line"></div><div class="line">        <span class="comment"># otherwise, apply a perspective warp to stitch the images</span></div><div class="line">        <span class="comment"># together</span></div><div class="line">        (matches, H, status) = M</div><div class="line">        result = cv2.warpPerspective(imageA, H,</div><div class="line">            (imageA.shape[<span class="number">1</span>] + imageB.shape[<span class="number">1</span>], imageA.shape[<span class="number">0</span>]))</div><div class="line">        result[<span class="number">0</span><span class="symbol">:imageB</span>.shape[<span class="number">0</span>], <span class="number">0</span><span class="symbol">:imageB</span>.shape[<span class="number">1</span>]] = imageB</div><div class="line"></div><div class="line">        <span class="comment"># check to see if the keypoint matches should be visualized</span></div><div class="line">        <span class="keyword">if</span> <span class="symbol">showMatches:</span></div><div class="line">            vis = <span class="keyword">self</span>.drawMatches(imageA, imageB, kpsA, kpsB, matches,</div><div class="line">                status)</div><div class="line"></div><div class="line">            <span class="comment"># return a tuple of the stitched image and the</span></div><div class="line">            <span class="comment"># visualization</span></div><div class="line">            <span class="keyword">return</span> (result, vis)</div><div class="line"></div><div class="line">        <span class="comment"># return the stitched image</span></div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectAndDescribe</span><span class="params">(<span class="keyword">self</span>, image)</span></span><span class="symbol">:</span></div><div class="line">        <span class="comment"># convert the image to grayscale</span></div><div class="line">        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</div><div class="line"></div><div class="line">        <span class="comment"># check to see if we are using OpenCV 3.X</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">isv3:</span></div><div class="line">            <span class="comment"># detect and extract features from the image</span></div><div class="line">            descriptor = cv2.xfeatures2d.SIFT_create()</div><div class="line">            (kps, features) = descriptor.detectAndCompute(image, None)</div><div class="line"></div><div class="line">        <span class="comment"># otherwise, we are using OpenCV 2.4.X</span></div><div class="line">        <span class="symbol">else:</span></div><div class="line">            <span class="comment"># detect keypoints in the image</span></div><div class="line">            detector = cv2.FeatureDetector_create(<span class="string">"SIFT"</span>)</div><div class="line">            kps = detector.detect(gray)</div><div class="line"></div><div class="line">            <span class="comment"># extract features from the image</span></div><div class="line">            extractor = cv2.DescriptorExtractor_create(<span class="string">"SIFT"</span>)</div><div class="line">            (kps, features) = extractor.compute(gray, kps)</div><div class="line"></div><div class="line">        <span class="comment"># convert the keypoints from KeyPoint objects to NumPy</span></div><div class="line">        <span class="comment"># arrays</span></div><div class="line">        kps = np.float32([kp.pt <span class="keyword">for</span> kp <span class="keyword">in</span> kps])</div><div class="line"></div><div class="line">        <span class="comment"># return a tuple of keypoints and features</span></div><div class="line">        <span class="keyword">return</span> (kps, features)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">matchKeypoints</span><span class="params">(<span class="keyword">self</span>, kpsA, kpsB, featuresA, featuresB,</span></span></div><div class="line"><span class="function"><span class="params">        ratio, reprojThresh)</span></span><span class="symbol">:</span></div><div class="line">        <span class="comment"># compute the raw matches and initialize the list of actual</span></div><div class="line">        <span class="comment"># matches</span></div><div class="line">        matcher = cv2.DescriptorMatcher_create(<span class="string">"BruteForce"</span>)</div><div class="line">        rawMatches = matcher.knnMatch(featuresA, featuresB, <span class="number">2</span>)</div><div class="line">        matches = []</div><div class="line"></div><div class="line">        <span class="comment"># loop over the raw matches</span></div><div class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> <span class="symbol">rawMatches:</span></div><div class="line">            <span class="comment"># ensure the distance is within a certain ratio of each</span></div><div class="line">            <span class="comment"># other (i.e. Lowe's ratio test)</span></div><div class="line">            <span class="keyword">if</span> len(m) == <span class="number">2</span> <span class="keyword">and</span> m[<span class="number">0</span>].distance &lt; m[<span class="number">1</span>].distance * <span class="symbol">ratio:</span></div><div class="line">                matches.append((m[<span class="number">0</span>].trainIdx, m[<span class="number">0</span>].queryIdx))</div><div class="line"></div><div class="line">        <span class="comment"># computing a homography requires at least 4 matches</span></div><div class="line">        <span class="keyword">if</span> len(matches) &gt; <span class="number">4</span><span class="symbol">:</span></div><div class="line">            <span class="comment"># construct the two sets of points</span></div><div class="line">            ptsA = np.float32([kpsA[i] <span class="keyword">for</span> (<span class="number">_</span>, i) <span class="keyword">in</span> matches])</div><div class="line">            ptsB = np.float32([kpsB[i] <span class="keyword">for</span> (i, <span class="number">_</span>) <span class="keyword">in</span> matches])</div><div class="line"></div><div class="line">            <span class="comment"># compute the homography between the two sets of points</span></div><div class="line">            (H, status) = cv2.findHomography(ptsA, ptsB, cv2.RANSAC,</div><div class="line">                reprojThresh)</div><div class="line"></div><div class="line">            <span class="comment"># return the matches along with the homograpy matrix</span></div><div class="line">            <span class="comment"># and status of each matched point</span></div><div class="line">            <span class="keyword">return</span> (matches, H, status)</div><div class="line"></div><div class="line">        <span class="comment"># otherwise, no homograpy could be computed</span></div><div class="line">        <span class="keyword">return</span> None</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawMatches</span><span class="params">(<span class="keyword">self</span>, imageA, imageB, kpsA, kpsB, matches, status)</span></span><span class="symbol">:</span></div><div class="line">        <span class="comment"># initialize the output visualization image</span></div><div class="line">        (hA, wA) = imageA.shape[<span class="symbol">:</span><span class="number">2</span>]</div><div class="line">        (hB, wB) = imageB.shape[<span class="symbol">:</span><span class="number">2</span>]</div><div class="line">        vis = np.zeros((max(hA, hB), wA + wB, <span class="number">3</span>), dtype=<span class="string">"uint8"</span>)</div><div class="line">        vis[<span class="number">0</span><span class="symbol">:hA</span>, <span class="number">0</span><span class="symbol">:wA</span>] = imageA</div><div class="line">        vis[<span class="number">0</span><span class="symbol">:hB</span>, <span class="symbol">wA:</span>] = imageB</div><div class="line"></div><div class="line">        <span class="comment"># loop over the matches</span></div><div class="line">        <span class="keyword">for</span> ((trainIdx, queryIdx), s) <span class="keyword">in</span> zip(matches, status)<span class="symbol">:</span></div><div class="line">            <span class="comment"># only process the match if the keypoint was successfully</span></div><div class="line">            <span class="comment"># matched</span></div><div class="line">            <span class="keyword">if</span> s == <span class="number">1</span><span class="symbol">:</span></div><div class="line">                <span class="comment"># draw the match</span></div><div class="line">                ptA = (int(kpsA[queryIdx][<span class="number">0</span>]), int(kpsA[queryIdx][<span class="number">1</span>]))</div><div class="line">                ptB = (int(kpsB[trainIdx][<span class="number">0</span>]) + wA, int(kpsB[trainIdx][<span class="number">1</span>]))</div><div class="line">                cv2.line(vis, ptA, ptB, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)</div><div class="line"></div><div class="line">        <span class="comment"># return the visualization</span></div><div class="line">        <span class="keyword">return</span> vis</div></pre></td></tr></table></figure>
<p>2-4行是导入需要的包。用NumPy来进行矩阵操作。imutils是一套OpenCV的简便方法。最后的cv2会导入OpenCV。<br>在第6行定义了Stitcher类，可以检测我们是否使用了OpenCV3。由于在opencv 2.4和OpenCV 3处理关键点检测和局部不变特征的有明显的差异，OpenCV的版本对我们的使用是很重要的。<br>接下来是定义的方法stitch，stitch方法只需要一个单一的参数：images。这是传入图片的列表，后面是要缝合在一起形成全景图。<br>还可以提供ratio ，用于特征匹配时David Lowe比率测试，reprojthresh 是RANSAC算法中最大像素“回旋的余地”，最后的showMatches，是一个布尔类型的值，用于表明是否应可以可视化关键点匹配。<br>第15行解压缩图片列表，这一次我们只包含两张图片的情况。照片列表的顺序很重要，我们希望能够提供的图像是从左到右的顺序。如果提供的不是这样的顺序，程序仍然可以跑，但是我们的输出全景将只包含一未“缝合”的。<br>（updating）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2847713-6a62bf8adc3c6f68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;基于OpenCV（Python）的图片拼接和全景图构建。 用两张有重叠区域的图来“缝合”创建一张全景图。构建全景图，利用到了计算机视觉和图像处理技术有：关键点检测、局部不变特征、关键点匹配、RANSAC(Random Sample Consensus)即随机采样一致性和透视变形。因为在处理关键点检测和局部不变性在OpenCV 2.4.X和OpenCV 3.X中有很大的不同，比如SIFT和SURF。这里将给出兼容两个版本的代码。在之后的博客会解决多张图片的拼接，而不仅仅只是针对两张图片。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://x-nicolo.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://x-nicolo.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://x-nicolo.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python-Opencv的安装</title>
    <link href="https://x-nicolo.github.io/2017/09/15/Python-Opencv%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>https://x-nicolo.github.io/2017/09/15/Python-Opencv的安装/</id>
    <published>2017-09-15T13:08:06.000Z</published>
    <updated>2017-09-15T13:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2847713-586e5ae773aafaa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><strong>Windows下安装python2和python3双版本</strong><br><strong>Python2的Opencv的安装</strong><br><a id="more"></a><br>Python整出的向下不兼容简直是败笔，无奈，还是要处理。<br>一直都在使用Python2，后来爬虫为了和team统一，使用上Python3。<br>现在上手图像处理的一下学习，不想用C++，Opencv有Python的接口，还是Python2成熟点，为了后续的出现问题少，还是用Python2吧。  </p>
<h2 id="Windows下安装python2和python3双版本"><a href="#Windows下安装python2和python3双版本" class="headerlink" title="Windows下安装python2和python3双版本"></a>Windows下安装python2和python3双版本</h2><h3 id="安装python-2-x"><a href="#安装python-2-x" class="headerlink" title="安装python 2.x"></a>安装python 2.x</h3><p>双击 python-2.7.12.amd64.msi 然后一路 Next就可以了。<br>需要注意的是python 2.x 默认安装在 C盘根目录下。</p>
<h4 id="配置python-2-x-的环境变量"><a href="#配置python-2-x-的环境变量" class="headerlink" title="配置python 2.x 的环境变量"></a>配置python 2.x 的环境变量</h4><p>此处需要将两个目录添加到path环境变量中：</p>
<ul>
<li>python命令文件所在目录： python 2.x安装目录</li>
<li>pip、easy_install等其他脚本文件所在目录： python 2.x安装目录下的Scripts目录</li>
</ul>
<p>将下面这行内容添加到Path变量的开始位置：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:<span class="symbol">\P</span>ython27;C:<span class="symbol">\P</span>ython27<span class="symbol">\S</span>cripts;</div></pre></td></tr></table></figure></p>
<p>　　</p>
<h3 id="安装python-3-x"><a href="#安装python-3-x" class="headerlink" title="安装python 3.x"></a>安装python 3.x</h3><p>此处选择自定义安装，因为要修改默认安装位置。另外这里勾选了 “Add Python 3.5 to PATH” 选项，会自动配置环境变量.</p>
<h3 id="将python-2-x-和-python-3-x的相关命令区分开来"><a href="#将python-2-x-和-python-3-x的相关命令区分开来" class="headerlink" title="将python 2.x 和 python 3.x的相关命令区分开来"></a>将python 2.x 和 python 3.x的相关命令区分开来</h3><p>解决方案是：将python 3.x 下的所有命令文件名称后都添加一个3，Python ==&gt; python3<br>删除Python35\Scripts下面的pip.exe  </p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>说明：一定要重新启动命令终端，否则的path变量不会被重新加载  </p>
<p>测试发现pip3有问题，其实就是pip的版本太低了，升级一下就可以了：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python3 -m pip <span class="keyword">install</span> -U pip</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2847713-f441d31553774972.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="Python2的Opencv的安装"><a href="#Python2的Opencv的安装" class="headerlink" title="Python2的Opencv的安装"></a>Python2的Opencv的安装</h2><h3 id="安装Numpy"><a href="#安装Numpy" class="headerlink" title="安装Numpy"></a>安装Numpy</h3><p>安装numpy，打开cmd，输入pip install numpy<br><img src="http://upload-images.jianshu.io/upload_images/2847713-7558d0330d97a94d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">  </p>
<p>测试：<br><img src="http://upload-images.jianshu.io/upload_images/2847713-314adab2d8593842.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">  </p>
<h3 id="安装opencv"><a href="#安装opencv" class="headerlink" title="安装opencv"></a>安装opencv</h3><ul>
<li>在官网自行下载，这里下载的是opencv2.4.13</li>
<li>复制cv2.pyd 将”\opencv\build\python\2.7\x64”或”\opencv\build\python\2.7\x86”（根据python版本）文件夹中找到cv2.pyd”，复制到Python安装文件的”C:\Python27\Lib\site-packages”文件夹中。</li>
</ul>
<p>测试：<br><img src="http://upload-images.jianshu.io/upload_images/2847713-5cea22d10dc5da90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>出现错误。<br>错误原因：Python2的版本为32位，opencv的版本为64位，window的版本为64位。<br>解决方法: 卸载Python2 32bit,安装Python2 64bit。接着重复“Python2的Opencv的安装”</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2847713-024d96636b0aa552.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>搞定！  </p>
<p>再测试：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="title">img</span> = cv2.imread(<span class="string">"C:\lena.jpg"</span>)</div><div class="line"><span class="title">cv2</span>.imshow(<span class="string">"lena"</span>,img)</div><div class="line"><span class="title">cv2</span>.waitKey(<span class="number">10000</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2847713-c5c32a4c119f6313.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>ok!  </p>
<h2 id="补：sublime的Python3和2的配置"><a href="#补：sublime的Python3和2的配置" class="headerlink" title="补：sublime的Python3和2的配置"></a>补：sublime的Python3和2的配置</h2><p>sublime作为Python的日常使用，还是需要在Python2和Python3直接切换的。    </p>
<p>打开Sublime Text 3，依次进入Tools–&gt;Build System–&gt;New Build System</p>
<p>Python3的配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"cmd"</span>: [<span class="string">"D:/Python35/python3.exe"</span>,<span class="string">"-u"</span>,<span class="string">"$file"</span>],</div><div class="line">    <span class="attr">"file_regex"</span>: <span class="string">"^[ ]*File \"(...*?)\", line ([0-9]*)"</span>,</div><div class="line">    <span class="attr">"selector"</span>: <span class="string">"source.python"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Python2的配置：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"cmd"</span>: [<span class="string">"C:/Python27/python.exe"</span>,<span class="string">"-u"</span>,<span class="string">"$file"</span>],</div><div class="line">    <span class="attr">"file_regex"</span>: <span class="string">"^[ ]*File \"(...*?)\", line ([0-9]*)"</span>,</div><div class="line">    <span class="attr">"selector"</span>: <span class="string">"source.python"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/2847713-767c02dc6d52c461.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>最后，选择需要的即可：<br><img src="http://upload-images.jianshu.io/upload_images/2847713-d1f028373ea61c2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2847713-586e5ae773aafaa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;&lt;strong&gt;Windows下安装python2和python3双版本&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Python2的Opencv的安装&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://x-nicolo.github.io/tags/Python/"/>
    
      <category term="Opencv" scheme="https://x-nicolo.github.io/tags/Opencv/"/>
    
  </entry>
  
  <entry>
    <title>图像拼接</title>
    <link href="https://x-nicolo.github.io/2017/09/14/%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5/"/>
    <id>https://x-nicolo.github.io/2017/09/14/图像拼接/</id>
    <published>2017-09-14T02:59:39.000Z</published>
    <updated>2017-09-14T02:59:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2847713-714448da668546ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="download.png"><br>图像拼接技术是计算机视觉和数字图像处理领域中一个研究的重点。图像拼接是指将描述同一场景的两张或者多张有重叠区域的图像,通过图像配准和图像融合技术拼接成一幅大场景全新图像的过程。<br><a id="more"></a></p>
<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>图像的拼接过程示具体应用情况不同有很多步骤，但主要包括三个重要步骤,为：图像的预处理、图像配准以及图像融合。</p>
<h2 id="图像的预处理"><a href="#图像的预处理" class="headerlink" title="图像的预处理"></a>图像的预处理</h2><p>由于在图像获取的过程中存在这很多干扰，光线不统一的情况，常常产生图像模糊、灰度偏移及几何变形。所以对图像进行预处理是很有必要的。图像预处理的主要目的是为了：消除干扰降低图像的配准难度，提高图像配准的准确度。图像预处理包括：图像去噪、图像投影、图像修正等。</p>
<h3 id="图像预处理"><a href="#图像预处理" class="headerlink" title="图像预处理"></a>图像预处理</h3><p>通过硬件传感器获取到的模拟图像在转换成数字图像的过程中，由于设备存在一些自身缺陷，所采集到的原始图像中有很多不同的干扰，获取的图像达不到人们期望的质量，就必须对原始图像进行准确、有效的图像去噪，图像修正等图像前期的预处理工作，确保图像之间具有精确到像素级的校准精度。因为，图像预处理阶段的精度对最终拼接图像的质量有直接影响，所以，有必要首先研究图像拼接前的预处理。</p>
<h4 id="图像的投影模型"><a href="#图像的投影模型" class="headerlink" title="图像的投影模型"></a>图像的投影模型</h4><p>由于图像序列是实体景物在不同坐标系下的二维投影，直接对拍摄图像进行拼接无法满足视觉一致性，所以需要将待拼接的图像分别投影到一个标准的坐标系下，然后再进行图像的拼接。常见的投影模型有：平面投影、柱面投影、球面投影、立方体投影。</p>
<h5 id="平面投影模式"><a href="#平面投影模式" class="headerlink" title="平面投影模式"></a>平面投影模式</h5><p>平面投影方式是指：一组有重叠的图片序列，把其中一张图片作为基准，将其它图片投影到这个基准坐标系中，使相邻图片重叠区域对齐，平面投影模式是最简单也是最直接的图像投影方式。</p>
<h5 id="球面投影模式"><a href="#球面投影模式" class="headerlink" title="球面投影模式"></a>球面投影模式</h5><p>球面投影是指：将图像序列投影到以一点为坐标中心的球面上。人的眼睛在看东西时的原理就类似于球面投影，因此，以视点为中心的球面投影模型是最自然的投影模型。但是球面投影模型也存在着一些缺点，比如球面上的像素点不是行列均匀排列的关系，球面不能展开成平面，这些都使得很多图像处理算法很难用在平面投影上。</p>
<h5 id="立方体投影模型"><a href="#立方体投影模型" class="headerlink" title="立方体投影模型"></a>立方体投影模型</h5><p>立方体投影是为了克服球形投影缺点最近提出的一种新的投影模型。这种投影模型的优点是方便计算机处理与储存图像，缺点是计算机形成的图像的投影比较简单，但对于实景拍摄的图像比较困难，原因是需要很好的校正相机的拍摄位置才不会使图片在投影时出现光学变形，并且这种投影在图像拼接时难以确定立方体定点与边的对应关系。</p>
<h5 id="柱面投影模型"><a href="#柱面投影模型" class="headerlink" title="柱面投影模型"></a>柱面投影模型</h5><p>柱面投影的核心是以相机为圆柱中心点，相机焦距为半径的一个柱面作为投影面。相比立方体和球面投影方式，柱面投影只能在水平方向上转动，在垂直方向上的转动有一定的限制，只允许在较小的范围上转动。</p>
<ul>
<li>柱面投影可以使用计算机内的图像格式直接进行存取。</li>
<li>柱面可以很好的展开成平面图像，使得图像处理方法更容易进行操作。</li>
<li>图像采集过程相比较球形投影和立方体投影简单，相机在拍摄过程中只需要固定一点然后旋转拍摄，期间使图像之间有一定的重合即可。</li>
</ul>
<p>基于以上对各个投影模型的分析，可以发现不同的投影模式有其特定的应用背景，目前，在图像拼接算法中比较常用的是柱面投影模型，在使用中，需要对相机焦距进行估值，然后将图片投影到以焦距为半径的柱面上，再进行之后的图像拼接算法处理。</p>
<h4 id="图像去噪"><a href="#图像去噪" class="headerlink" title="图像去噪"></a>图像去噪</h4><p>数字图像噪声产生原因很多，有来自内部的干扰，如：电器机械产生的抖动、相机的热噪声、模数转换产生的误差等，也有来自外部的干扰，如：电磁波的冲击等。在图像拼接中，图像去噪的目的是为了方便之后算法处理过程，同时也起到改善图像视觉效果的作用。</p>
<p>图像去噪可分为基于图像空间域和基于图像变换域的处理方法。</p>
<p>图像空间域去噪方法有很多，主要是通过设计一种加权求和滤波器，对图像进行滤波是图像更加的平滑与模糊，通过平滑模糊图像牺牲图像纹理信息的方法来达到去噪的目的，比较常用的有：领域平均法，其算法取掩模内像素灰度值的平均值作为中心像素点的灰度值；空间域低通滤波发，其算法是通过一个低通卷积模版在空间域进行图像卷积运算，达到图像去噪的目的；中值滤波法一种非线性空间域滤波算法，在一定条件下，可以避免线性滤波器带来的图像变模糊的缺点。</p>
<p>图像变换域去噪方法原理是：将空间域图像线性变换到变换域进行处理，然后将处理后的图片反变换回空间域，达到去除图像噪声的目的。进行线性变换的方法有很多种，其中比较常用的有：傅里叶变换、余弦变换、小波变换以及Ridgelet变换等，各种变换都有各自不同的特点，合理的利用这些特点处理变换域的系数，在反变换回空间域将很有效地达到去除图像噪声的目的。</p>
<h4 id="图像的增强"><a href="#图像的增强" class="headerlink" title="图像的增强"></a>图像的增强</h4><p>增强的首要目的是处理图像，使其比原始图像更适合于特定目的。</p>
<p>图像增强的方法分为两大类：空间域法和频域法。“空间域法”是以对图像的像素直接处理为基础的。“频域法”以修改图像的傅氏为基础的。图像空间域增强根据变换函数的不同可分为：对数变换法、幂级数变换法、直方图处理法等；频域增强法有：低通滤波、高通滤波、同态滤波等。</p>
<h2 id="图像配准"><a href="#图像配准" class="headerlink" title="图像配准"></a>图像配准</h2><p>图像配准的目的是确定一组图像序列的重叠部分和重叠位置，并且对于不同角度、不同时间和不同光照等随机条件下采集的图片做到最佳的配准效果，所以，图像配准算法是图像拼接里最为关键的步骤，图像配准算法的好坏直接影响到最后图像拼接的效率与准确率，近年来，国内外对图像拼接的研究重心基本都是在图像配准上。</p>
<h4 id="图像配准的原理及概念"><a href="#图像配准的原理及概念" class="headerlink" title="图像配准的原理及概念"></a>图像配准的原理及概念</h4><p>假设给定两幅图像和,其中是两幅图像空间和中的某一点。图像配准算法的目标是找到一种变换,使得变换某一图后两幅图像的相似程度：达到最大。相似性测度是一个跟变换有关并借助两幅图像数据计算出的用来衡量相似程度的函数，最后通过一种数学优化算法找到该函数的最优解，即变换。</p>
<h4 id="图像配准算法"><a href="#图像配准算法" class="headerlink" title="图像配准算法"></a>图像配准算法</h4><p>图像配准算法可以分为基于区域和基于特征的算法。在待配准的图像中，以一幅图像作为参考图像，其它图像则称为目标图像。图像配准需要将目标图像进行空间几何变换使得与参考图像对齐。基于区域灰度强度的配准方法是通过模板在拼接图像中寻找与参考图像相似度最高的模版，从而找到最佳的配准位置；基于特征的配准方法则是通过匹配几幅图像中相似度最高的特征点，来找到最好的配准效果，其中特征点有：角点、线和轮廓，基于特征的配准算法包括：Harris角点检测算法、SIFT尺度不变转换算法、SURF尺度不变算法等。</p>
<h5 id="基于空间域像素灰度值的方法。"><a href="#基于空间域像素灰度值的方法。" class="headerlink" title="基于空间域像素灰度值的方法。"></a>基于空间域像素灰度值的方法。</h5><p>早期的像素配准算法一般都是直接利用图像中的像素选定一定区域来建立模板进行拼接,而其中模板的选取一般都不会很复杂，最简单的方法是利用整幅图像作为模版，然后利用选取的模版在相邻有重叠部分的图片上平移，通过计算比较模版覆盖区域的相似程度，找到一种最佳的匹配方式。这种基于灰度的算法计算量大运算速度慢。针对全局图像搜索慢的缺点，Toyama提出了一种在一幅图片中选取一块矩形区域作为模版进行搜索，然后通过计算比较最后的相关度，最后找到相关度最大的位置即为最佳配准位置，该算法相比之前的算法运算速度上有了一定的提升，但计算量仍然很大。Faugeras提出基于多层分辨率金字塔的配准算法，该算法通过从粗到细的顺序寻找相似度最佳的匹配位置，该方法在很大程度上提高了运算速率，但对于图像存在尺度变化、旋转角度大等情况匹配的效果不是很好。</p>
<p>Faugeras等提出了基于金字塔数据结构的多分辨率图像配准算法,按由粗到细的顺序寻找最佳配准位置,首先算出图像邻域内的像素点的灰度平均值,得到分辨率低一级的数字图像,再照此算法继续下去，可得到一组金字塔式的数字图像,在对两幅待拼接的数字图像都做了此处理后,从两幅数字图像的某一低级的分辨率开始进行搜索,直到搜索到一个最佳的配准位置。此算法的搜索速度很快，拼接图像尺度缩放小的情况下具有良好的效果，但如果图像的旋转的角度很大,配准效果就不是很好。</p>
<h5 id="基于图像特征的配准算法"><a href="#基于图像特征的配准算法" class="headerlink" title="基于图像特征的配准算法"></a>基于图像特征的配准算法</h5><p>由于基于区域的图像配准算法在试图利用图像的全局信息进行图像配准时，出现计算量大和对图像本身特征敏感的问题，决定了该算法只能应用于一部分图像尺度、几何、亮度变化比较简单的图像，因此，另一种基于特征的图像配准算法就显得更加有效。基于特征的配准算法是目前应用最广的一种图像配准算法，该方法具有计算量少、对图像（尺度、几何、亮度）变化不敏感、配准效果好等特点，这类方法主要是提取图像中对几何、尺度、亮度变化不敏感特征，生成一对图像的特征集合，最后通过计算比较这对特征集合的相似度，寻找出最佳的配准位置。</p>
<h5 id="图像的几何变换模型"><a href="#图像的几何变换模型" class="headerlink" title="图像的几何变换模型"></a>图像的几何变换模型</h5><p>通常待拼接的图像之间一般都有不同程度的几何形变，为了实现图像的拼接，就必须找到图像之间存在的几何变换模型，空间变换模型的方式有平移模型、刚性模型、相似模型、仿射模型以及投影模型等。</p>
<p>矩阵M里面未知数的不同形式对应于不同的几何变换。</p>
<ul>
<li>刚性变换</li>
</ul>
<p>该变换代表相机模型平移和绕光轴旋转运动，对应的物体形状大小不变。</p>
<ul>
<li>仿射变换</li>
</ul>
<p>仿射变换的特点是：变换是线性的，经过仿射变换的直线仍然是直线。可以表示相机的平移、旋转、缩放运动。仿射变换后的平行线依然是平行线，仿射变换有6个自由度</p>
<ul>
<li>透视变换</li>
</ul>
<p>透视变换是最一般的变换形式，前面提到的几种变换：刚性变换、仿射变换等都是透视变换的特殊形式，透视变换具有8个自由度</p>
<p>上面介绍的几种变换是图像拼接中经常用到的模型，每一种图像变换模型都有其各自适用的领域，在数字图像拼接中都会应用其中的某种图像变换模型。图像变换模型的选择将直接关系到拼接图像的结果。</p>
<h4 id="图像的重采样"><a href="#图像的重采样" class="headerlink" title="图像的重采样"></a>图像的重采样</h4><p>在确定了图像之间的变换矩阵之后，接下来就是对拼接图像进行重采样，将拼接图像上的像素点采样到同一坐标系下。图像重采样有两种方法，分别是：直接法和间接法。</p>
<p>直接法：是从原始数字图像上的像素点坐标出发，通过变换矩阵求出拼接后图像上对应的像素点的坐标，再将原始图像上像素点的灰度值赋给拼接后数字图像上的对应像素点。</p>
<p>间接法：是从拼接后图像上像素点坐标出发，求出原始图像上对应的像素点坐标，然后将原始图像上像素点的灰度值赋给拼接后图像上对应坐标的像素点。</p>
<p>在对坐标点进行矩阵运算求对应坐标点时，无论是直接法还是间接法都会出现计算得出非整数坐标值的问题，因此，需要用到邻域范围内像素点的灰度信息，通过插值的方法求出目标点的灰度值。比较常用的插值算法有：最近邻值法、双线性插值法和立方卷积法。通过分析可以知道，三种算法的精确度由低到高，同时计算复杂度也是由低到高。</p>
<p>图像配准是图像拼接的关键步骤，直接决定了最后图像拼接的质量。数字图像配准目的是能够找到一个空间变换,使得数字图像序列之间相互重叠的部分的坐标点能够准确地对准。图像配准算法不但要保证图像配准时的准确度,而且要能够减小计算量，图像配准是数字图像拼接技术的关键步骤。</p>
<h2 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h2><p>图像配准后，通过对配准图像重采样就可以进行图像的拼接。但由于图像灰度差异等原因，拼接后的图像很容易出现亮度差异和拼接接缝，所以在图像拼接后需要进行图像融合，使拼接后的图片看起来自然准确。</p>
<p>在建立参考图像与拼接图像的配准关系后，就可以将图像进行拼接了，由于图像之间无可避免地存在着灰度差异，使得拼接后的图片出现拼缝或者亮度差异的情况。图像融合就是在图像拼接过程中尽量减少亮度差异以及消除拼缝的过程。图像融合分成图像合并和拼缝消除两个过程。</p>
<h4 id="图像融合意义"><a href="#图像融合意义" class="headerlink" title="图像融合意义"></a>图像融合意义</h4><p>图像融合是指：在确定参考图像与拼接图像的几何变换关系之后，接着将待拼接图像的像素点投影到参考图像坐标系中</p>
<h4 id="图像融合方法分类"><a href="#图像融合方法分类" class="headerlink" title="图像融合方法分类"></a>图像融合方法分类</h4><p>在图像拼接中，图像融合主要用来将拼接后得到的图像重叠部分进行融合，使图像在视觉上保持一致性，图像融合根据拼缝消除方法的不同可分为：直接平均法、加权平均法和渐入渐出法等。</p>
<p>图像拼接需要从待拼接图像中检测出重叠部分才能进行拼接，这需要对待拼接图像提取关键信息从而确定图像的拼接部分。之前介绍分析过基于图像像素块查找法和图像特征点提取法，在实际应用中，直接匹配图像像素点运算量大，对图像几何变换、灰度差异、尺度缩放都比较敏感，因此很少直接应用。一般的实际应用中，主要采取了特征点提取的方法。图像的特征点因为具有可重复性、特殊性、鲁棒性，使得在图像拼接中，我们只要提取待拼接图像的特征点，然后通过特征点确定图像直接的配准关系，这无疑大大减小计算量，也提高了匹配的精确度。</p>
<h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>图像拼接分为四个步骤：图像匹配、重投影、缝合和融合。  </p>
<ul>
<li>图像匹配：是指一对描绘相同场景之间的几张图片的几何对应关系。一组照片可以是不同时间不同位置的拍摄，或者由多个传感器同时拍摄多张图像。</li>
<li>重投影：通过图像的几何变换，把一系列图片转换成一个共同的坐标系</li>
<li>缝合：通过合并重叠部分的像素值并保持没有重叠的像素值使之生成更大画布的图像</li>
<li>融合：通过几何和光度偏移错误通常导致对象的不连续，并在两个图像之间的边界附近产生可见的接缝。因此，为了减小接缝的出现，需要在缝合时或缝合之后使用混合算法.</li>
</ul>
<h2 id="图像拼接算法分类"><a href="#图像拼接算法分类" class="headerlink" title="图像拼接算法分类"></a>图像拼接算法分类</h2><p>如图二所示，对“图像匹配方法”分类，图像拼接算法可分为基于“空间域”和“频域”。基于空间域的图像拼接可以进一步划分为基于区域的图像拼接和基于特征的图像拼接。基于特征的图像拼接可以再细分为基于底层特征的图像拼接（low level feature-based image mosaicing）和基于轮廓的图像拼接（contour-based image mosaicing）。基于底层特征的拼接可以分为四类：基于Harris角点检测器的拼接、基于FAST角点检测器的拼接、基于SIFT特征检测器的拼接、以及基于SURF特征检测器的拼接。<br>如图三所示，根据“融合方法”，拼接算法可分为基于平滑过渡（transition smoothening-based）和基于最佳接缝（optimal seam-based）。基于平滑过渡拼接可以进一步被分成基于羽化（feathering-based）、基于金字塔（pyramid-based）、和基于梯度（gradient-based）的拼接。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2847713-986c481690f77842.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2847713-99e9c13566159dba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="对图像拼接的“图像匹配方法-registration-”分类"><a href="#对图像拼接的“图像匹配方法-registration-”分类" class="headerlink" title="对图像拼接的“图像匹配方法(registration)”分类"></a>对图像拼接的“图像匹配方法(registration)”分类</h2><h3 id="基于空间域-Spatial-domain-图像拼接算法"><a href="#基于空间域-Spatial-domain-图像拼接算法" class="headerlink" title="基于空间域(Spatial domain)图像拼接算法"></a>基于空间域(Spatial domain)图像拼接算法</h3><p>这类算法使用像素的属性进行图像匹配，因此它们是最直接的图像拼接的方法。现有的图像拼接算法大部分都属于这一类。图像拼接算法大部分都属于这一类。“基于空间域图像拼接算法”可以是基于区域（area-based）或基于特征（feature-based）的。“基于区域“的图像拼接算法依赖于计算待拼接的两个图像的“窗口”像素值基本方法是将图像有关联的“窗口”互相转移，看看有多少像素的匹配。<br>最常用的两个基于空间域的图像拼接算法 是基于“归一化互相关”（normalized cross correlation）的拼接和基于“互信息”（mutual information）的拼接。这两种方法都提供了图像相似性的量度，这些指标的较大值来自匹配区域或“窗口”大小。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2847713-714448da668546ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;download.png&quot;&gt;&lt;br&gt;图像拼接技术是计算机视觉和数字图像处理领域中一个研究的重点。图像拼接是指将描述同一场景的两张或者多张有重叠区域的图像,通过图像配准和图像融合技术拼接成一幅大场景全新图像的过程。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="图像处理" scheme="https://x-nicolo.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【MOOC】Python网络爬虫与信息提取</title>
    <link href="https://x-nicolo.github.io/2017/09/12/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96/"/>
    <id>https://x-nicolo.github.io/2017/09/12/Python网络爬虫与信息提取/</id>
    <published>2017-09-12T11:52:13.000Z</published>
    <updated>2017-09-12T11:52:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2847713-d092ff3b7905fb2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>Python网络爬虫与信息提取-北京理工大学-嵩天<br>发布大学：北京理工大学<br>发布课程：Python网络爬虫与信息提取<br>授课老师：嵩天<br>课程简介：<em>“The website is the API.”</em>网络爬虫逐渐成为自动获取网络信息的主要形式<br>还等什么？快写个爬虫探索世界吧！<br><a id="more"></a></p>
<h2 id="单元1：Requests库入门"><a href="#单元1：Requests库入门" class="headerlink" title="单元1：Requests库入门"></a>单元1：Requests库入门</h2><h3 id="Request库的安装"><a href="#Request库的安装" class="headerlink" title="Request库的安装"></a>Request库的安装</h3><p>win + R,pip install requests  </p>
<h3 id="Requests库的7个主要方法"><a href="#Requests库的7个主要方法" class="headerlink" title="Requests库的7个主要方法"></a>Requests库的7个主要方法</h3><ul>
<li>requests.request() 构造一个请求，支撑以下各方法的基础方法  </li>
<li>requests.get() 获取HTML网页的主要方法，对应于HTTP的GET  </li>
<li>requests.head 获取HTML网页头信息的方法，对应于HTTP的HEAD</li>
<li>requests.post 向HTML网页提交POST请求的方法，对应于HTTP的POST</li>
<li>requests.put() 向HTML网页提交PUT请求的方法，对应于HTTP的PUT</li>
<li>requests.patch() 向HTML网页提交局部修改请求，对应于HTTP的PATCH</li>
<li>requests.delete（） 向HTML页面提交删除请求，对应于HTTP的DELETE  </li>
</ul>
<h4 id="requests-get"><a href="#requests-get" class="headerlink" title="requests.get()"></a>requests.get()</h4><p>r = requests.get(url) 获得一个网页最简单的方法<br><img src="http://upload-images.jianshu.io/upload_images/2847713-f6d2a1889af84b8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>r = requests.get(url)完整的使用方法：r = requests.get(url,params=None,<strong>kwargs)<br>url:拟获取页面的URL链接<br>params: URL中的额外参数、字典或字节流格式，可选  
</strong>kwargs:12个控制访问的参数<br>根据源代码可知，Requests库的7个主要方法,后面6个都是调用requests.request()来实现的</p>
<p>requests库的2个重要对象<br><img src="http://upload-images.jianshu.io/upload_images/2847713-54f0a6349888634f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">  </p>
<p>Response对象的属性    </p>
<ul>
<li>r.status_code:HTTP请求的返回状态，200表示连接成功，404表示失败  </li>
<li>r.text:HTTP响应内容的字符串形式，即URL对应的页面内容  </li>
<li>r.encoding：从HTTP header中猜测的响应内容编码方式  </li>
<li>r.apparent_encoding:从内容中分析出响应内容编码方式（备选编码方式）</li>
<li>r.content:HTTP响应内容的二进制形式  </li>
</ul>
<p>基本流程：<br><img src="http://upload-images.jianshu.io/upload_images/2847713-3481c920f9fddfe8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>理解Response的编码<br>r.encoding:从HTTP header中猜测的响应内容编码形式<br>r.apparent_encoding：从内容中分析出的响应内容编码方式（备选编码方式）  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2847713-d092ff3b7905fb2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Python网络爬虫与信息提取-北京理工大学-嵩天&lt;br&gt;发布大学：北京理工大学&lt;br&gt;发布课程：Python网络爬虫与信息提取&lt;br&gt;授课老师：嵩天&lt;br&gt;课程简介：&lt;em&gt;“The website is the API.”&lt;/em&gt;网络爬虫逐渐成为自动获取网络信息的主要形式&lt;br&gt;还等什么？快写个爬虫探索世界吧！&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://x-nicolo.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://x-nicolo.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>数据结构笔记（二）</title>
    <link href="https://x-nicolo.github.io/2017/09/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://x-nicolo.github.io/2017/09/11/数据结构笔记（二）/</id>
    <published>2017-09-11T07:50:41.000Z</published>
    <updated>2017-09-11T07:50:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>第4章 栈与队列</strong><br><strong>第5章 串</strong><br><strong>第6章 树</strong></p>
<a id="more"></a>
<h3 id="第4章-栈与队列"><a href="#第4章-栈与队列" class="headerlink" title="第4章 栈与队列"></a>第4章 栈与队列</h3><p>栈是限定仅在表尾进行插入和删除操作的线性表。<br>队列是只允许在一段进行插入操作、而在另一端进行删除操作的线性表。  </p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>把允许插入和删除的一端称为栈顶（top），另一端称为栈底（bottom）,不含任何数据元素的栈称为空栈。栈又称为后进先出（Last In First Out）的线性表。  </p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是一种先进先出的线性表，允许插入的一端称为队尾，允许删除的一端称为队头。</p>
<h3 id="第5章-串"><a href="#第5章-串" class="headerlink" title="第5章 串"></a>第5章 串</h3><p>串：串是由零个或多个字符组成的有限序列，又名叫字符串。  </p>
<h3 id="第6章-树"><a href="#第6章-树" class="headerlink" title="第6章 树"></a>第6章 树</h3><p>树是n(n&gt;=0)个结点的有限集。n=0时称为空树。在任意一棵非空树中：（1）有且仅有一个特定的称为根（root）的结点；（2）当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集T1、T2、、Tn,其中每一个集合本身又是一棵树，并且称为根的子树（subtree）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;第4章 栈与队列&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;第5章 串&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;第6章 树&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="数据结构" scheme="https://x-nicolo.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>杂言杂语</title>
    <link href="https://x-nicolo.github.io/2017/09/10/%E5%9F%8E%E5%86%85%E5%A2%99%E5%A4%96/"/>
    <id>https://x-nicolo.github.io/2017/09/10/城内墙外/</id>
    <published>2017-09-10T12:21:46.000Z</published>
    <updated>2017-09-10T12:21:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>“当任何时候你觉得难受了，其实你的大脑是在进化，当任何时候你觉得轻松，其实都在使用以前的坏习惯。”</p>
</blockquote>
<a id="more"></a>
<p>研一结束，研二开始。从进了俱乐部到现在作为俱乐部主席。其实我很不喜欢听到别人叫我“主席”这两个字，这两个字好像有更远的距离，这两个字更多的意味着责任。我总觉得自己十分幸运。幸运的遇到能一直无私帮助我的人，无私促使我成长。  </p>
<p>这段时间一直在忙俱乐部纳新的事情，看到新生申请的报名表，优秀的人真的好多，在他们面前我都汗颜。让我想到之前的科协，好像回到了从前。这几天事情比较多，用回了锤子便签，同步后发现自己当初写的一段话：</p>
<blockquote>
<p>一年来，作为科协第23界主席我觉得自己也成长了不少。对一切事情的认识，对人的认识都感觉不是以一个人的眼光来看，是以一个全局的眼光去看待一件事情是否有利于这个组织的发展。在科协待了三年许，其中感情不言而喻。少了些许个人意气用事，收敛了些许暴戾的脾气，一切都以这个大集体为重。</p>
<p>作为科协主席，一定要有大局观。不管科协主席团其他人是怎么样的主席一定要坚持到最后，将事情做完。讨论事情的错在于谁或者错在哪里在时候再做讨论。主席团需要批评的存在，一家人有问题就说问题，完了以后还是一家人。  </p>
<p>作为主席，是所有活动的制定者而不是执行者。这一点一定要谨记！！！要细而再细的去安排，去安排到各部责任到人。主席只是安排与检查他们执行完后的反馈。确保每个任务都有它的反馈机制，不要上边安排，下面并没有执行。有事没事都要去考虑一下科协的未来发展方向，接下来科协要做什么？这段时间的主要任务是什么？该怎么分配时间？该如何去安排各部开展工作？预期结果如何？实际结果？以后的工作需要怎么改进？要为科协留下宝贵的财富。记得将所有的东西存档，归类。要均衡发展各部，督促他们完成他们应该完成的事情。</p>
<p>不管自己以前脾气怎么样，安排如何，做到主席这个位子，就一定要以大局为重，这也是在当主席来一年来成长最多的地方。要学的会艺术的讲话，会与人沟通，在正式场合，所有的讲话都不是代表个人的，而是代表科协，必须注意这点。<br>多去主动找负责科协的老师，有事情找老师，没事情找老师汇报工作。也要多去找有科研项目的老师，为科协的主席团，技术团，大二成员找事情做。<br>对于科协比赛，科协的规章制度，科协的种种要敢于创新的去创新，不要一味的照搬前几届的做法，科协需要新鲜血液的注入，需要敢于闯，敢于大干的人！   </p>
<p>去年印包科协纳新是宣讲会邀请我去发言，归来是主管的徐老师送我们回金花，一路上夸我们自动化科协，批评他们印包科协，说了一句话我记忆犹新，也是我写在自己工作本上的一句话”把科协当做事业来做！”</p>
</blockquote>
<p>没想到我当时竟然有如此大的目标：”把科协当做事业来做！”<br>我觉得我在科协是付出了，也和大家一起做出了成绩，是给科协留下了一些宝贵的东西的。<br>研究生生活确实蛮苦逼的，但是我仍然想在俱乐部里做点事情，留下点东西。  </p>
<p>说点其他的。</p>
<p>人啊，认清自己很重要！情商也是属于智商的一部分！<br>总有人的脾气比能力还大，井底之蛙最可怕的就是没有敬畏之心。<br>当所有人都想削尖脑袋往一个地方挤的时候，你觉得自己如何与别人竞争？<br>自己想要的东西就去积极争取啊，而不是总想着天上掉馅饼!   </p>
<p>最后，永怀敬畏之心，好好说话，情绪稳定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“当任何时候你觉得难受了，其实你的大脑是在进化，当任何时候你觉得轻松，其实都在使用以前的坏习惯。”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://x-nicolo.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="日常" scheme="https://x-nicolo.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python3学习集合</title>
    <link href="https://x-nicolo.github.io/2017/08/31/Python3%E5%AD%A6%E4%B9%A0%E9%9B%86%E5%90%88/"/>
    <id>https://x-nicolo.github.io/2017/08/31/Python3学习集合/</id>
    <published>2017-08-31T07:10:16.000Z</published>
    <updated>2017-08-31T07:10:16.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><a href="">打印</a></li>
<li><a href="">list的使用</a></li>
<li><a href="">tuple元组</a></li>
<li><a href="">条件判断</a></li>
<li><a href="">循环</a></li>
<li><a href="">定义函数</a></li>
<li><a href="">函数的参数</a></li>
<li><a href="">递归函数</a></li>
<li><a href="">函数作为返回值</a></li>
<li><a href="">切片</a></li>
<li><a href="">列表生成器</a></li>
<li><a href="">生成器</a></li>
<li><a href="">迭代器</a></li>
<li><a href="">map/reduce</a></li>
<li><a href="">filter</a></li>
<li><a href="">sorted</a></li>
<li><a href="">lambda 匿名函数</a></li>
<li><a href="">Decorator装饰器</a></li>
<li><a href="">偏函数</a></li>
<li><a href="">字典dic和set</a></li>
<li><a href="">模块</a></li>
<li><a href="">面向对象编程</a></li>
<li><a href="">类和实例</a></li>
<li><a href="">private 访问限制</a></li>
<li><a href="">继承和多态</a></li>
<li><a href="">获取对象信息</a><a id="more"></a>
</li>
</ol>
<h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"hello"</span>)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"这样"</span>,<span class="string">"可以"</span>,<span class="string">"连接"</span>,<span class="string">"起来吗？"</span>,<span class="string">",自动识别为空格"</span>)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"试试"</span>+<span class="string">"加好可以连接吗?"</span>,<span class="string">"事实证明是可以的"</span>)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"100+200 ="</span>,<span class="number">100</span>+<span class="number">200</span>)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(len(<span class="string">"abc"</span>)</span></span>)</div></pre></td></tr></table></figure>
<h3 id="list的使用"><a href="#list的使用" class="headerlink" title="list的使用"></a>list的使用</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">classmates = [<span class="string">"Nicolo"</span>,<span class="string">"Tom"</span>,<span class="string">"Jerry"</span>]</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"从开始取："</span>,classmates[<span class="number">0</span>])</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"从末尾取："</span>,classmates[-<span class="number">1</span>])</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"获取list的长度："</span>,len(classmates)</span></span>)</div><div class="line">classmates.append(<span class="string">'Adam'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"list中追加元素到末尾："</span>,classmates[-<span class="number">1</span>])</span></span></div><div class="line">classmates.insert(<span class="number">1</span>, <span class="string">'Jack'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"按照索引插值："</span>,classmates[<span class="number">1</span>])</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"要删除list末尾的元素，用pop()方法,删除的东西"</span>,classmates.pop()</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"要删除指定位置的元素，用pop(i)方法，其中i是索引位置："</span>, classmates.pop(<span class="number">1</span>)</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"要把某个元素替换成别的元素，可以直接赋值给对应的索引位置："</span>)</span></span></div><div class="line">classmates[<span class="number">1</span>] = <span class="string">'Sarah'</span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(classmates)</span></span></div></pre></td></tr></table></figure>
<h3 id="tuple元组"><a href="#tuple元组" class="headerlink" title="tuple元组"></a>tuple元组</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"tuple一旦初始化就不能修改，比如同样是列出同学的名字"</span>)</div><div class="line">classmates = (<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>)</div><div class="line">print(classmates)</div><div class="line"><span class="meta"># 现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。</span></div><div class="line"><span class="meta"># 其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。</span></div><div class="line"><span class="meta"># 不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。</span></div></pre></td></tr></table></figure>
<h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 输入用户年龄，根据年龄打印不同的内容，在Python程序中，用if语句实现：</span></div><div class="line">age = 24</div><div class="line"><span class="keyword">if</span> age &gt; 18:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"他的年龄是"</span>,age)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"他长大了"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"他还是个小男孩"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> age &gt;= 18:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'adult'</span>)</div><div class="line"><span class="keyword">elif</span> age &gt;= 6:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'teenager'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'kid'</span>)</div></pre></td></tr></table></figure>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># Python的循环有两种，一种是<span class="keyword">for</span>...<span class="keyword">in</span>循环，依次把<span class="keyword">list</span>或tuple中的每个元素迭代出来</div><div class="line">names = ['Michael', 'Bob', 'Tracy']</div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</div><div class="line">    <span class="keyword">print</span> (name)</div><div class="line">    # 所以<span class="keyword">for</span> x <span class="keyword">in</span> ...循环就是把每个元素代入变量x，然后执行缩进块的语句。</div><div class="line"></div><div class="line"># 计算1-10的整数之和，可以用一个<span class="keyword">sum</span>变量做累加</div><div class="line"><span class="keyword">sum</span> = 0</div><div class="line"><span class="keyword">for</span> <span class="keyword">n</span> <span class="keyword">in</span> [1,2,3,4,5,6,7,8,9,10]:</div><div class="line">    <span class="keyword">sum</span> = <span class="keyword">sum</span> +<span class="keyword">n</span></div><div class="line"><span class="keyword">print</span>(<span class="keyword">sum</span>)</div><div class="line"># 如果要计算1-100的整数之和，从1写到100有点困难，幸好Python提供一个<span class="keyword">range</span>()函数</div><div class="line"># 可以生成一个整数序列，再通过<span class="keyword">list</span>()函数可以转换为<span class="keyword">list</span>。</div><div class="line"># <span class="keyword">print</span>(<span class="keyword">list</span>(<span class="keyword">range</span>(101)))</div><div class="line">sum1 = 0</div><div class="line"><span class="keyword">for</span> <span class="keyword">n</span> <span class="keyword">in</span> <span class="keyword">list</span>(<span class="keyword">range</span>(101)):</div><div class="line">    sum1 = sum1 + <span class="keyword">n</span></div><div class="line"><span class="keyword">print</span>(sum1)</div></pre></td></tr></table></figure>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:</span></div><div class="line"><span class="comment"># 然后，在缩进块中编写函数体，函数的返回值用return语句返回。</span></div><div class="line"><span class="comment"># 自定义一个求绝对值的my_abs函数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> - x</div><div class="line"></div><div class="line">print(my_abs(<span class="number">0</span>))</div><div class="line">print(my_abs(<span class="number">-1</span>))</div><div class="line"></div><div class="line"><span class="comment"># 定义空函数</span></div><div class="line"><span class="comment"># 占位符作用</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 数据类型检查可以用内置函数isinstance()实现</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 返回多个值</span></div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></div><div class="line">    nx = x + step * math.cos(angle)</div><div class="line">    ny = y - step * math.sin(angle)</div><div class="line">    <span class="keyword">return</span> nx, ny</div></pre></td></tr></table></figure>
<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义注册函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">enroll</span><span class="params">(name,gender,age,city)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span>,name)</div><div class="line">    print(<span class="string">'gender:'</span>,gender)</div><div class="line">    print(<span class="string">'age:'</span>,age)</div><div class="line">    print(<span class="string">'city:'</span>,city)</div><div class="line"></div><div class="line">enroll(<span class="string">"Nicolo"</span>,<span class="string">"male"</span>,<span class="number">24</span>,<span class="string">"Xian"</span>)</div><div class="line"></div><div class="line"><span class="comment">#或定义某几个参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">enroll2</span><span class="params">(name,gender,age= <span class="number">24</span>,city = <span class="string">"Xian"</span>)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span>,name)</div><div class="line">    print(<span class="string">'gender:'</span>,gender)</div><div class="line">    print(<span class="string">'age:'</span>,age)</div><div class="line">    print(<span class="string">'city:'</span>,city)</div><div class="line">enroll2(<span class="string">"Nicolo"</span>,<span class="string">"male"</span>)</div><div class="line"></div><div class="line"><span class="comment">#可变参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum +n</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line"></div><div class="line"><span class="comment">#test</span></div><div class="line">print(<span class="string">"1-2之和："</span>,calc(<span class="number">1</span>,<span class="number">2</span>))</div><div class="line"></div><div class="line"><span class="comment"># Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去</span></div><div class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</div><div class="line">print(<span class="string">"1-10之和："</span>,calc(*nums))</div><div class="line"><span class="comment"># *nums表示把nums这个list的所有元素作为可变参数传进去。</span></div></pre></td></tr></table></figure>
<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。</span></div><div class="line"><span class="comment"># 计算阶乘n! = 1 x 2 x 3 x ... x n</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n * fact(n<span class="number">-1</span>)</div><div class="line"></div><div class="line">print(fact(<span class="number">10</span>))</div><div class="line"><span class="comment"># 使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。</span></div></pre></td></tr></table></figure>
<h3 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</span></div><div class="line"><span class="comment"># 通常情况下，求和的函数是这样定义的：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(*args)</span>:</span></div><div class="line">    ax = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">        ax = ax +n</div><div class="line">    <span class="keyword">return</span> ax</div><div class="line">print(calc_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</div><div class="line"></div><div class="line"><span class="comment"># 但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></div><div class="line">        ax = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">            ax = ax +n</div><div class="line">        <span class="keyword">return</span> ax </div><div class="line">    <span class="keyword">return</span> sum</div><div class="line"></div><div class="line"><span class="comment"># 当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：</span></div><div class="line">f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</div><div class="line"><span class="comment"># 调用函数f时，才真正计算求和的结果：</span></div><div class="line">print(f())</div><div class="line"></div><div class="line"><span class="comment"># 在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，</span></div><div class="line"><span class="comment"># 当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 闭包</span></div><div class="line"></div><div class="line"><span class="comment"># 注意到返回的函数在其定义内部引用了局部变量args，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用</span></div><div class="line"></div><div class="line"><span class="comment"># 小结</span></div><div class="line"></div><div class="line"><span class="comment"># 一个函数可以返回一个计算结果，也可以返回一个函数。</span></div><div class="line"></div><div class="line"><span class="comment"># 返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。</span></div></pre></td></tr></table></figure>
<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta"># <span class="number">1</span>行代码能实现的功能，决不写<span class="number">5</span>行代码。请始终牢记，代码越少，开发效率越高。</span></div><div class="line"></div><div class="line"><span class="meta">#切片</span></div><div class="line"><span class="meta"># 取一个list或tuple的部分元素是非常常见的操作</span></div><div class="line">L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line"><span class="meta"># 取前N个元素，也就是索引为<span class="number">0</span>-(N<span class="number">-1</span>)的元素，可以用循环：</span></div><div class="line"><span class="keyword">print</span>(L[<span class="number">0</span>:<span class="number">3</span>])</div><div class="line"><span class="keyword">print</span>(L[:<span class="number">3</span>])</div><div class="line"><span class="meta"># L[<span class="number">0</span>:<span class="number">3</span>]表示，从索引<span class="number">0</span>开始取，直到索引<span class="number">3</span>为止，但不包括索引<span class="number">3</span>。即索引<span class="number">0</span>，<span class="number">1</span>，<span class="number">2</span>，正好是<span class="number">3</span>个元素。</span></div><div class="line"></div><div class="line"><span class="meta"># 从索引<span class="number">1</span>开始，取出<span class="number">2</span>个元素出来：</span></div><div class="line"><span class="keyword">print</span>(L[<span class="number">1</span>:<span class="number">3</span>])</div><div class="line"><span class="meta"># 支持倒数切片</span></div><div class="line"><span class="keyword">print</span>(<span class="string">"倒数切片"</span>,L[<span class="number">-2</span>:])</div><div class="line"><span class="keyword">print</span>(<span class="string">"倒数切片"</span>,L[<span class="number">-2</span>:<span class="number">-1</span>])</div><div class="line"><span class="meta"># 记住倒数第一个元素的索引是<span class="number">-1</span>。</span></div><div class="line"></div><div class="line"><span class="meta"># 其他操作</span></div><div class="line">nums = list(range(<span class="number">100</span>))</div><div class="line"><span class="keyword">print</span>(<span class="string">"取前10个："</span>,nums[:<span class="number">10</span>])</div><div class="line"><span class="keyword">print</span>(<span class="string">"取后10个："</span>,nums[<span class="number">-10</span>:])</div><div class="line"><span class="keyword">print</span>(<span class="string">"取前11-20个数："</span>,nums[<span class="number">11</span>:<span class="number">20</span>])</div><div class="line"><span class="keyword">print</span>(<span class="string">"前10个数，每两个取一个："</span>,nums[:<span class="number">10</span>:<span class="number">2</span>])</div><div class="line"><span class="keyword">print</span>(<span class="string">"所有数，每5个取一个："</span>,nums[::<span class="number">5</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta"># tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple</span></div><div class="line">nums2 = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)[:<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span>(nums2)</div><div class="line"></div><div class="line"><span class="meta"># 字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串</span></div><div class="line"><span class="keyword">str</span> = <span class="string">'ABCDEFGHIJKMLN'</span>[:<span class="number">4</span>]</div><div class="line"><span class="keyword">print</span>(<span class="keyword">str</span>)</div></pre></td></tr></table></figure>
<h3 id="列表生成器"><a href="#列表生成器" class="headerlink" title="列表生成器"></a>列表生成器</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。</span></div><div class="line"><span class="comment"># 生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></div><div class="line">a = list(range(<span class="number">1</span>, <span class="number">11</span>))</div><div class="line"><span class="built_in">print</span>(a)</div><div class="line"></div><div class="line"><span class="comment"># 生成[1x1, 2x2, 3x3, ..., 10x10]怎么做？</span></div><div class="line"><span class="comment">#方法一</span></div><div class="line">l = []</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</div><div class="line">    l.append(x*x)</div><div class="line"><span class="built_in">print</span>(<span class="string">"方法一"</span>,l)</div><div class="line"></div><div class="line"><span class="comment"># 方法二</span></div><div class="line">L = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</div><div class="line"><span class="built_in">print</span>(<span class="string">"方法二"</span>,L)</div><div class="line"><span class="comment"># 写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来</span></div><div class="line"></div><div class="line"><span class="comment"># for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：</span></div><div class="line">L2 = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> ==<span class="number">0</span>]</div><div class="line"><span class="built_in">print</span>(<span class="string">"筛选出仅偶数的平方"</span>,L2)</div><div class="line"></div><div class="line"><span class="comment"># 还可以使用两层循环，可以生成全排列</span></div><div class="line">L3 = [m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">"ABC"</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">"XYZ"</span>]</div><div class="line"><span class="built_in">print</span>(<span class="string">"生成全排列"</span>,L3)</div><div class="line"></div><div class="line"><span class="comment"># 列出当前目录下的所有文件和目录名</span></div><div class="line"><span class="comment"># 运用列表生成式，可以写出非常简洁的代码。</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line">L4 = [d <span class="keyword">for</span> d <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>)]</div><div class="line"><span class="built_in">print</span>(<span class="string">"列出当前目录下的所有文件和目录名"</span>,L4)</div><div class="line"></div><div class="line"><span class="comment"># 列表生成式也可以使用两个变量来生成list</span></div><div class="line">d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125;</div><div class="line">L5 = [k+<span class="string">'='</span>+ v <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()]</div><div class="line"><span class="built_in">print</span>(<span class="string">"使用两个变量来生成list"</span>,L5)</div><div class="line"></div><div class="line"><span class="comment"># 把一个list中所有的字符串变成小写：</span></div><div class="line">L6 = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="string">'IBM'</span>, <span class="string">'Apple'</span>]</div><div class="line">L7 = [s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L6]</div><div class="line"><span class="built_in">print</span>(<span class="string">"所有的字符串变成小写"</span>,L7)</div></pre></td></tr></table></figure>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？</span></div><div class="line"><span class="comment"># 这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</span></div><div class="line"><span class="comment"># generator保存的是算法</span></div><div class="line"></div><div class="line"><span class="comment"># 第一种方法</span></div><div class="line"><span class="comment"># 只要把一个列表生成式的[]改成()，就创建了一个generator</span></div><div class="line">L = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</div><div class="line">print(L)</div><div class="line">g = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>))</div><div class="line"></div><div class="line"><span class="comment"># 创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。</span></div><div class="line"><span class="comment"># 可以通过next()函数获得generator的下一个返回值</span></div><div class="line">print(next(g))</div><div class="line"><span class="comment"># 这种不断调用next(g)实在是太变态了，正确的方法是使用for循环</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> g:</div><div class="line">    print(n)</div><div class="line"></div><div class="line"><span class="comment"># 斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：</span></div><div class="line"><span class="comment"># 1, 1, 2, 3, 5, 8, 13, 21, 34, ...</span></div><div class="line"><span class="comment"># 斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n&lt;max:</div><div class="line">        print(b)</div><div class="line">        a,b=b,a+b</div><div class="line">        n=n+<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'done'</span></div><div class="line"><span class="comment"># fib函数实际上是定义了斐波拉契数列的推算规则</span></div><div class="line"><span class="comment"># 要把fib函数变成generator，只需要把print(b)改为yield b就可以了</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n&lt;max:</div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a,b=b,a+b</div><div class="line">        n=n+<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'done'</span></div><div class="line">    <span class="comment"># 如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator</span></div><div class="line"></div><div class="line">    <span class="comment"># generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。</span></div><div class="line">    <span class="comment"># 而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</span></div><div class="line"></div><div class="line"><span class="comment"># 举个简单的例子，定义一个generator，依次返回数字1，3，5</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'step 1'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    print(<span class="string">'step 2'</span>)</div><div class="line">    <span class="keyword">yield</span>(<span class="number">3</span>)</div><div class="line">    print(<span class="string">'step 3'</span>)</div><div class="line">    <span class="keyword">yield</span>(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment"># 调用该generator时，首先要生成一个generator对象，然后用next()函数不断获得下一个返回值：</span></div><div class="line"><span class="comment"># o = odd()</span></div><div class="line"><span class="comment"># next(o)</span></div></pre></td></tr></table></figure>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 可以直接作用于<span class="keyword">for</span>循环的数据类型有以下几种：</span></div><div class="line"><span class="meta">#</span><span class="bash"> 一类是集合数据类型，如list、tuple、dict、<span class="built_in">set</span>、str等；</span></div><div class="line"><span class="meta">#</span><span class="bash"> 一类是generator，包括生成器和带yield的generator <span class="keyword">function</span>。</span></div><div class="line"><span class="meta">#</span><span class="bash"> 这些可以直接作用于<span class="keyword">for</span>循环的对象统称为可迭代对象：Iterable。</span></div><div class="line"><span class="meta">#</span><span class="bash"> 可以使用isinstance()判断一个对象是否是Iterable对象</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 而生成器不但可以作用于<span class="keyword">for</span>循环，还可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值了。</span></div><div class="line"><span class="meta">#</span><span class="bash"> 可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。</span></div><div class="line"><span class="meta">#</span><span class="bash"> 可以使用isinstance()判断一个对象是否是Iterator对象：</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 如果给定一个list或tuple，我们可以通过<span class="keyword">for</span>循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。</span></div><div class="line"><span class="meta">#</span><span class="bash"> 在Python中，迭代是通过<span class="keyword">for</span> ... <span class="keyword">in</span>来完成的</span></div><div class="line"><span class="meta">#</span><span class="bash"> Python的<span class="keyword">for</span>循环抽象程度要高于Java的<span class="keyword">for</span>循环，因为Python的<span class="keyword">for</span>循环不仅可以用在list或tuple上，还可以作用在其他可迭代对象上。</span></div><div class="line"><span class="meta">#</span><span class="bash"> list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代</span></div><div class="line">d = &#123;'a': 1, 'b': 2, 'c': 3&#125;</div><div class="line">for key in d:</div><div class="line">    print("迭代出key值",key)</div><div class="line">    #默认情况下，dict迭代的是key。</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 如果要迭代value，可以用<span class="keyword">for</span> value <span class="keyword">in</span> d.values()</span></div><div class="line">for value in d.values():</div><div class="line">    print("迭代出value值",value)</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 如果要同时迭代key和value，可以用<span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()</span></div><div class="line">for k,v in d.items():</div><div class="line">    print("迭代出key和value值",k,v)</div></pre></td></tr></table></figure>
<h3 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</div><div class="line"># 比如我们有一个函数f(<span class="keyword">x</span>)=<span class="keyword">x</span><span class="number">2</span>，要把这个函数作用在一个list [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]上，就可以用map()实现如下</div><div class="line">def f(<span class="keyword">x</span>):</div><div class="line">    return <span class="keyword">x</span> * <span class="keyword">x</span></div><div class="line">r = map(f,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</div><div class="line">print(list(r))</div><div class="line"># 结果r是一个Iterator，Iterator是惰性序列，因此通过list()函数让它把整个序列都计算出来并返回一个list。</div><div class="line"></div><div class="line"># 一行代码</div><div class="line">print(list(map(f,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])))</div><div class="line"></div><div class="line"># reduce把一个函数作用在一个序列[<span class="keyword">x</span><span class="number">1</span>, <span class="keyword">x</span><span class="number">2</span>, <span class="keyword">x</span><span class="number">3</span>, ...]上</div><div class="line"># 这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：</div><div class="line"># reduce(f, [<span class="keyword">x</span><span class="number">1</span>, <span class="keyword">x</span><span class="number">2</span>, <span class="keyword">x</span><span class="number">3</span>, <span class="keyword">x</span><span class="number">4</span>]) = f(f(f(<span class="keyword">x</span><span class="number">1</span>, <span class="keyword">x</span><span class="number">2</span>), <span class="keyword">x</span><span class="number">3</span>), <span class="keyword">x</span><span class="number">4</span>)</div><div class="line">from functools import reduce</div><div class="line">def <span class="keyword">add</span>(<span class="keyword">x</span>,y):</div><div class="line">    return <span class="keyword">x</span> + y</div><div class="line">print(reduce(<span class="keyword">add</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]))</div></pre></td></tr></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># filter()函数用于过滤序列</span></div><div class="line"><span class="comment"># 和map()类似，filter()也接收一个函数和一个序列。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 在一个list中，删掉偶数，只保留奇数，可以这么写：</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"></div><div class="line">print(list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>])))</div><div class="line"></div><div class="line"><span class="comment"># 把一个序列中的空字符串删掉</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</div><div class="line">print(list(filter(not_empty,[<span class="string">'A'</span>,<span class="string">''</span>,<span class="string">'B'</span>,<span class="string">''</span>,<span class="keyword">None</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])))</div></pre></td></tr></table></figure>
<h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># sorted排序算法</div><div class="line"># 排序算法</div><div class="line"></div><div class="line"># 排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。</div><div class="line"># 如果是数字，我们可以直接比较，但如果是字符串或者两个dict呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。</div><div class="line"></div><div class="line"># Python内置的sorted()函数就可以对<span class="type">list</span>进行排序</div><div class="line"># 从小到大</div><div class="line">print(<span class="string">"一般使用"</span>,sorted([<span class="number">112</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">23</span>,<span class="number">67</span>,<span class="number">85</span>]))</div><div class="line"></div><div class="line"># sorted()函数也是一个高阶函数，它还可以接收一个<span class="type">key</span>函数来实现自定义的排序，例如按绝对值大小排序：</div><div class="line">print(<span class="string">"带参排序"</span>,sorted([<span class="number">12</span>,<span class="number">53</span>,<span class="number">-213</span>,<span class="number">-65</span>,<span class="number">2</span>,<span class="number">-52</span>],<span class="type">key</span> = abs))</div><div class="line"></div><div class="line"># 要进行反向排序，不必改动<span class="type">key</span>函数，可以传入第三个参数reverse=True</div><div class="line">print(<span class="string">"反向排序"</span>,sorted([<span class="number">112</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">23</span>,<span class="number">67</span>,<span class="number">85</span>],reverse=True))</div></pre></td></tr></table></figure>
<h3 id="lambda-匿名函数"><a href="#lambda-匿名函数" class="headerlink" title="lambda 匿名函数"></a>lambda 匿名函数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 在Python中，对匿名函数提供了有限支持。还是以map()函数为例，计算f(x)=x2时，除了定义一个f(x)的函数外，还可以直接传入匿名函数：</span></div><div class="line">print(list(map(lambda x: x * x,[1,2,3,4,5,6,7,8,9])))</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 通过对比可以看出，匿名函数lambda x: x * x实际上就是：</span></div><div class="line"><span class="meta">#</span><span class="bash"> def f(x):</span></div><div class="line"><span class="meta">#</span><span class="bash">     <span class="built_in">return</span> x * x</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 关键字lambda表示匿名函数，冒号前面的x表示函数参数。</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 匿名函数有个限制，就是只能有一个表达式，不用写<span class="built_in">return</span>，返回值就是该表达式的结果。</span></div><div class="line"><span class="meta">#</span><span class="bash"> 用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数：</span></div><div class="line"></div><div class="line">f = lambda x: x * x</div><div class="line">print("lambda使用",f(5))</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 也可以把匿名函数作为返回值返回</span></div><div class="line">def build(x,y):</div><div class="line">    return lambda: x*x + y*y</div><div class="line">build(2,3)</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 小结</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> Python对匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数。</span></div></pre></td></tr></table></figure>
<h3 id="Decorator装饰器"><a href="#Decorator装饰器" class="headerlink" title="Decorator装饰器"></a>Decorator装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-7-25'</span>)</div><div class="line">f = now</div><div class="line">f()</div><div class="line"></div><div class="line"><span class="comment"># 函数对象有一个__name__属性，可以拿到函数的名字：</span></div><div class="line">print(now.__name__)</div><div class="line">print(f.__name__)</div><div class="line"></div><div class="line"><span class="comment"># # 假设我们要增强now()函数的功能，</span></div><div class="line"><span class="comment"># 比如，在函数调用前后自动打印日志，</span></div><div class="line"><span class="comment"># 但又不希望修改now()函数的定义，</span></div><div class="line"><span class="comment"># 这种在代码运行期间动态增加功能的方式，</span></div><div class="line"><span class="comment"># 称之为“装饰器”（Decorator）。</span></div><div class="line"><span class="comment"># 本质上，decorator就是一个返回函数的高阶函数。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 要定义一个能打印日志的decorator，可以定义如下：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper  </div><div class="line"></div><div class="line"><span class="comment"># 观察上面的log，因为它是一个decorator，</span></div><div class="line"><span class="comment"># 所以接受一个函数作为参数，并返回一个函数。</span></div><div class="line"><span class="comment"># 我们要借助Python的@语法，把decorator置于函数的定义处</span></div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-7-25'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 调用now()函数，不仅会运行now()函数本身，还会在运行now()函数前打印一行日志：</span></div><div class="line"></div><div class="line">now()</div></pre></td></tr></table></figure>
<h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 在介绍函数参数的时候，我们讲到，通过设定参数的默认值，可以降低函数调用的难度。而偏函数也可以做到这一点</span></div><div class="line"><span class="meta"># int()函数可以把字符串转换为整数，当仅传入字符串时，int()函数默认按十进制转换</span></div><div class="line">print(<span class="string">"默认十进制"</span>,<span class="keyword">int</span>(<span class="string">'123456'</span>))</div><div class="line"><span class="meta"># 但int()函数还提供额外的base参数，默认值为10。如果传入base参数，就可以做N进制的转换：</span></div><div class="line">print(<span class="string">"八进制"</span>,<span class="keyword">int</span>(<span class="string">'12345'</span>,base = <span class="number">8</span>))</div><div class="line"></div><div class="line">def int2(x, base=<span class="number">2</span>):</div><div class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(x, base)</div><div class="line">print(<span class="string">"二进制"</span>,int2(<span class="string">'1000000'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta"># functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2</span></div><div class="line"></div><div class="line">import functools</div><div class="line">int2 = functools.partial(<span class="keyword">int</span>, base = <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="meta"># 简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。</span></div><div class="line"><span class="meta"># 注意到上面的新的int2函数，仅仅是把base参数重新设定默认值为2，但也可以在函数调用时传入其他值：</span></div><div class="line">int2(<span class="string">'1000000'</span>, base=<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h3 id="字典dic和set"><a href="#字典dic和set" class="headerlink" title="字典dic和set"></a>字典dic和set</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python内置了字典：dict的支持，dict全称dictionary</span></div><div class="line"><span class="comment"># 在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</span></div><div class="line"><span class="comment"># 这个通过key计算位置的算法称为哈希算法（Hash）。</span></div><div class="line"><span class="comment"># []：list</span></div><div class="line"><span class="comment"># ()：tuple</span></div><div class="line"><span class="comment"># &#123;&#125;: dict</span></div><div class="line"></div><div class="line"><span class="comment"># 学生成绩</span></div><div class="line">score = &#123;<span class="string">"Nicolo"</span>:100,<span class="string">"Tom"</span>:99,<span class="string">"Jerry"</span>:99&#125;</div><div class="line"><span class="builtin-name">print</span>(<span class="string">"打印Nicolo的成绩："</span>,score[<span class="string">"Nicolo"</span>])</div><div class="line"><span class="comment"># 把数据放入dict的方法，除了初始化时指定外，还可以通过key放入</span></div><div class="line">score[<span class="string">"Nicolo"</span>] = 101</div><div class="line"><span class="builtin-name">print</span>(<span class="string">"打印Nicolo的成绩："</span>,score[<span class="string">"Nicolo"</span>])</div><div class="line"></div><div class="line"><span class="comment"># 要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：</span></div><div class="line"><span class="builtin-name">print</span>(<span class="string">"Nicolo"</span> <span class="keyword">in</span> score)</div><div class="line"><span class="comment"># 要删除一个key，用pop(key)方法，对应的value也会从dict中删除：</span></div><div class="line">score.pop(<span class="string">"Jerry"</span>)</div><div class="line"><span class="builtin-name">print</span>(score)</div><div class="line"></div><div class="line"><span class="comment"># set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</span></div><div class="line">s  = <span class="builtin-name">set</span>([1,2,3])</div><div class="line"><span class="comment"># 通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：</span></div><div class="line">s.<span class="builtin-name">add</span>(4)</div><div class="line"><span class="builtin-name">print</span>(s)</div><div class="line"><span class="comment"># 通过remove(key)方法可以删除元素</span></div><div class="line">s.<span class="builtin-name">remove</span>(4)</div><div class="line"><span class="builtin-name">print</span>(<span class="string">"移除后的"</span>,s)</div></pre></td></tr></table></figure>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里</span></div><div class="line"><span class="meta"># 这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式</span></div><div class="line"><span class="meta"># 在Python中，一个.py文件就称之为一个模块（Module）</span></div><div class="line"></div><div class="line"><span class="meta"># 使用模块有什么好处？</span></div><div class="line"></div><div class="line"><span class="meta"># 最大的好处是大大提高了代码的可维护性。</span></div><div class="line"><span class="meta"># 其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。</span></div><div class="line"><span class="meta"># 我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。</span></div><div class="line"><span class="meta"># 引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。</span></div><div class="line"><span class="meta"># 现在，abc.py模块的名字就变成了mycompany.abc，类似的，xyz.py的模块名变成了mycompany.xyz。</span></div><div class="line"><span class="meta"># 每一个包目录下面都会有一个__init__.py的文件</span></div><div class="line"><span class="meta"># 这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。</span></div><div class="line"><span class="meta"># __init__.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块，而它的模块名就是mycompany。</span></div><div class="line"></div><div class="line"><span class="meta"># 使用模块</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta"># 以内建的sys模块为例，编写一个hello的模块：</span></div><div class="line"></div><div class="line"><span class="meta">#!/usr/bin/env python3</span></div><div class="line"><span class="meta"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">' a test module '</span></div><div class="line">__author__ = <span class="string">'Nicolo'</span></div><div class="line"></div><div class="line">import sys</div><div class="line"></div><div class="line">def test():</div><div class="line">    args = sys.argv</div><div class="line">    <span class="keyword">if</span> len(args)==<span class="number">1</span>:</div><div class="line">        print(<span class="string">'Hello, world!'</span>)</div><div class="line">    elif len(args)==<span class="number">2</span>:</div><div class="line">        print(<span class="string">'Hello, %s!'</span> % args[<span class="number">1</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'Too many arguments!'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    test()</div><div class="line"></div><div class="line"><span class="meta"># 第1行和第2行是标准注释，第1行注释可以让这个hello.py文件直接在Unix/Linux/Mac上运行，第2行注释表示.py文件本身使用标准UTF-8编码；</span></div><div class="line"></div><div class="line"><span class="meta"># 第4行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；</span></div><div class="line"></div><div class="line"><span class="meta"># 第6行使用__author__变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名；</span></div><div class="line"></div><div class="line"><span class="meta"># 以上就是Python模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。</span></div><div class="line"></div><div class="line"><span class="meta"># sys模块有一个argv变量，用list存储了命令行的所有参数。argv至少有一个元素，因为第一个参数永远是该.py文件的名称，例如：</span></div><div class="line"><span class="meta"># 运行python3 hello.py获得的sys.argv就是['hello.py']；</span></div><div class="line"><span class="meta"># 运行python3 hello.py Nicolo获得的sys.argv就是['hello.py', 'Nicolo']。</span></div><div class="line"></div><div class="line"><span class="meta"># 注意到这两行代码：</span></div><div class="line"></div><div class="line"><span class="meta"># if __name__=='__main__':</span></div><div class="line"><span class="meta">#     test()</span></div><div class="line"></div><div class="line"><span class="meta"># 在命令行运行hello模块文件时，Python解释器把一个特殊变量__name__置为__main__</span></div><div class="line"><span class="meta"># 而如果在其他地方导入该hello模块时，if判断将失败</span></div><div class="line"><span class="meta"># 因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta"># 安装第三方模块</span></div><div class="line"></div><div class="line">pip install XXX</div></pre></td></tr></table></figure>
<h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象</span></div><div class="line"><span class="comment"># 然后，给对象发一个print_score消息，让对象自己把自己的数据打印出来。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name,score)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">        print(<span class="string">'%s: %s'</span> % (<span class="keyword">self</span>.name, <span class="keyword">self</span>.score))</div><div class="line"></div><div class="line"></div><div class="line">bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</div><div class="line">lisa = Student(<span class="string">'Lisa Simpson'</span>, <span class="number">87</span>)</div><div class="line">bart.print_score()</div><div class="line">lisa.print_score()</div></pre></td></tr></table></figure>
<h3 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ClassANDInstance</span></div><div class="line"><span class="comment"># 类和实例</span></div><div class="line"><span class="comment"># Python中，定义类是通过class关键字：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span>(<span class="title">object</span>):</span></div><div class="line">    pass</div><div class="line"><span class="comment"># class后面紧接着是类名，即Student，类名通常是大写开头的单词</span></div><div class="line"><span class="comment"># 紧接着是(object)，表示该类是从哪个类继承下来</span></div><div class="line"><span class="comment"># 继承的概念我们后面再讲，通常，如果没有合适的继承类</span></div><div class="line"><span class="comment"># 就使用object类，这是所有类最终都会继承的类。</span></div><div class="line"></div><div class="line"><span class="comment"># 定义好了Student类，就可以根据Student类创建出Student的实例，创建实例是通过类名+()实现的：</span></div><div class="line">bart1 = Student1()</div><div class="line">bart1.name = <span class="string">'Bart Simpson'</span></div><div class="line"></div><div class="line"><span class="comment"># 由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。</span></div><div class="line"><span class="comment"># 通过定义一个特殊的__init__方法，在创建实例的时候，就把name，score等属性绑上去：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span>(<span class="title">object</span>):</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name,score)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">self</span>.name = name </div><div class="line">        <span class="keyword">self</span>.score = score</div><div class="line"></div><div class="line"><span class="comment"># 注意：特殊方法“init”前后有两个下划线！！！</span></div><div class="line"><span class="comment"># 注意到__init__方法的第一个参数永远是self，表示创建的实例本身</span></div><div class="line"><span class="comment"># 因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。</span></div><div class="line"><span class="comment"># 有了__init__方法，在创建实例的时候，就不能传入空的参数了</span></div><div class="line"><span class="comment"># 必须传入与__init__方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去：</span></div><div class="line">bart2 = Student2(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</div><div class="line">print(<span class="string">"姓名"</span>,bart2.name)</div><div class="line">print(<span class="string">"成绩"</span>,bart2.score)</div><div class="line"></div><div class="line"><span class="comment"># 和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self</span></div><div class="line"><span class="comment"># 并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别</span></div><div class="line"><span class="comment"># 所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</span></div><div class="line"></div><div class="line"><span class="comment"># 数据封装</span></div><div class="line"></div><div class="line"><span class="comment"># 面向对象编程的一个重要特点就是数据封装。</span></div><div class="line"><span class="comment"># 在上面的Student类中，每个实例就拥有各自的name和score这些数据。</span></div><div class="line"><span class="comment"># 我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</span></div><div class="line"><span class="comment"># 既然Student实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问</span></div><div class="line"><span class="comment"># 可以直接在Student类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。</span></div><div class="line"><span class="comment"># 这些封装数据的函数是和Student类本身是关联起来的，我们称之为类的方法：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3</span>(<span class="title">object</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, score)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">        print(<span class="string">'%s: %s'</span> % (<span class="keyword">self</span>.name, <span class="keyword">self</span>.score))</div><div class="line"></div><div class="line"><span class="comment"># 要定义一个方法，除了第一个参数是self外，其他和普通函数一样。</span></div><div class="line"><span class="comment"># 要调用一个方法，只需要在实例变量上直接调用，除了self不用传递，其他参数正常传入：</span></div><div class="line">bart3 = Student3(<span class="string">'Nicolo'</span>, <span class="number">99</span>)</div><div class="line">bart3.print_score()</div></pre></td></tr></table></figure>
<h3 id="private-访问限制"><a href="#private-访问限制" class="headerlink" title="private 访问限制"></a>private 访问限制</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，</span></div><div class="line"><span class="comment"># 在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问</span></div><div class="line"><span class="comment"># 所以，我们把Student类改一改：</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, score)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">self</span>.__name = name <span class="comment">#私有变量</span></div><div class="line">        <span class="keyword">self</span>.__score = score <span class="comment">#私有变量</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">        print(<span class="string">'%s: %s'</span> % (<span class="keyword">self</span>.__name, <span class="keyword">self</span>.__score))</div><div class="line"><span class="comment"># 如果外部代码要获取name和score怎么办？可以给Student类增加get_name和get_score这样的方法：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">#get方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(<span class="keyword">self</span>)</span></span>:  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.__name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.__score</div><div class="line"></div><div class="line"><span class="comment"># 允许外部代码修改score怎么办？可以再给Student类增加set_score方法：</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">#set方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(<span class="keyword">self</span>, score)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">self</span>.__score = score</div><div class="line"></div><div class="line"><span class="comment"># 在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量</span></div><div class="line"><span class="comment"># 特殊变量是可以直接访问的，不是private变量，所以，不能用__name__、__score__这样的变量名。</span></div></pre></td></tr></table></figure>
<h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 编写了一个名为Animal的class，有一个run()方法可以直接打印：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Animal is running...'</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Eating meat...'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 当我们需要编写Dog和Cat类时，就可以直接从Animal类继承：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Dog is running...'</span>)</div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Cat is running...'</span>)</div><div class="line"><span class="comment"># 对于Dog来说，Animal就是它的父类，对于Animal来说，Dog就是它的子类。Cat和Dog类似。</span></div><div class="line"><span class="comment"># test</span></div><div class="line">dog = Dog()</div><div class="line">dog.run()</div><div class="line">dog.eat()</div><div class="line"></div><div class="line">cat = Cat()</div><div class="line">cat.run()</div><div class="line"><span class="comment"># cat.eat()当子类和父类都存在相同的run()方法时，我们说，子类的run()覆盖了父类的run()，在代码运行的时候，总是会调用子类的run()。这样，我们就获得了继承的另一个好处：多态。</span></div></pre></td></tr></table></figure>
<h3 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？</span></div><div class="line"><span class="meta">#</span><span class="bash"> 使用<span class="built_in">type</span>()</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 首先，我们来判断对象类型，使用<span class="built_in">type</span>()函数：</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 基本类型都可以用<span class="built_in">type</span>()判断：</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">type</span>(123)</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 使用isinstance()</span></div><div class="line"><span class="meta">#</span><span class="bash"> 对于class的继承关系来说，使用<span class="built_in">type</span>()就很不方便。我们要判断class的类型，可以使用isinstance()函数。</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 使用dir()</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 如果要获得一个对象的所有属性和方法，可以使用dir()函数，它返回一个包含字符串的list，比如，获得一个str对象的所有属性和方法：</span></div><div class="line"></div><div class="line">print(x for x % 7 == 0 in range(101) )</div></pre></td></tr></table></figure>
<h3 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 由于Python是动态语言，根据类创建的实例可以任意绑定属性。</span></div><div class="line"></div><div class="line"><span class="comment"># 给实例绑定属性的方法是通过实例变量，或者通过self变量：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line"></div><div class="line">s = Student(<span class="string">'Bob'</span>)</div><div class="line">s.score = <span class="number">90</span></div><div class="line"></div><div class="line"><span class="comment"># 但是，如果Student类本身需要绑定一个属性呢？可以直接在class中定义属性，这种属性是类属性，归Student类所有：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></div><div class="line">    name = <span class="string">'Student'</span></div><div class="line"></div><div class="line"><span class="comment"># 在编写程序的时候，千万不要把实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;打印&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;list的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;tuple元组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;条件判断&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;定义函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;函数的参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;递归函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;函数作为返回值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;切片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;列表生成器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;生成器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;迭代器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;map/reduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;sorted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;lambda 匿名函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;Decorator装饰器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;偏函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;字典dic和set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;面向对象编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;类和实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;private 访问限制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;继承和多态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;获取对象信息&lt;/a&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://x-nicolo.github.io/tags/Python/"/>
    
      <category term="学习" scheme="https://x-nicolo.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>tomcat启动问题（JDBC文件配置问题）</title>
    <link href="https://x-nicolo.github.io/2017/08/31/tomcat%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98%EF%BC%88JDBC%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%EF%BC%89/"/>
    <id>https://x-nicolo.github.io/2017/08/31/tomcat启动问题（JDBC文件配置问题）/</id>
    <published>2017-08-31T03:41:24.000Z</published>
    <updated>2017-08-31T03:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题：部署完tomcat，只显示首页，点击无反应。<br>解决：是JDBC配置的问题。<br><a id="more"></a><br>正确配置：</p>
<pre><code>jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/bridgedisaster?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false//本地端口，不是远程连接
jdbc.username=root//打开navicat,连接测试的用户名
jdbc.password=root//连接测试的密码
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题：部署完tomcat，只显示首页，点击无反应。&lt;br&gt;解决：是JDBC配置的问题。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="bug" scheme="https://x-nicolo.github.io/tags/bug/"/>
    
      <category term="Mysql" scheme="https://x-nicolo.github.io/tags/Mysql/"/>
    
      <category term="Tomcat" scheme="https://x-nicolo.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>PS、视频作品集合</title>
    <link href="https://x-nicolo.github.io/2017/08/30/PS%E4%BD%9C%E5%93%81%E9%9B%86%E5%90%88/"/>
    <id>https://x-nicolo.github.io/2017/08/30/PS作品集合/</id>
    <published>2017-08-30T08:00:11.000Z</published>
    <updated>2017-08-30T08:00:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里是我的一些PS、视频作品。<br>不想做好美工的程序员不是好程序员！<br><a id="more"></a></p>
<h3 id="2017西电华为创新俱乐部纳新宣传海报及易拉宝"><a href="#2017西电华为创新俱乐部纳新宣传海报及易拉宝" class="headerlink" title="2017西电华为创新俱乐部纳新宣传海报及易拉宝"></a>2017西电华为创新俱乐部纳新宣传海报及易拉宝</h3><h4 id="【Photoshop】系列海报"><a href="#【Photoshop】系列海报" class="headerlink" title="【Photoshop】系列海报"></a>【Photoshop】系列海报</h4><p><img src="http://opms50p58.bkt.clouddn.com/%E6%96%B01.jpg" alt=""><br><img src="http://opms50p58.bkt.clouddn.com/%E5%BF%832.jpg" alt=""><br><img src="http://opms50p58.bkt.clouddn.com/%E8%96%AA2.jpg" alt=""><br><img src="http://opms50p58.bkt.clouddn.com/%E6%96%B02.jpg" alt=""><br><img src="http://opms50p58.bkt.clouddn.com/%E8%96%AA1.jpg" alt=""><br><img src="http://opms50p58.bkt.clouddn.com/%E5%BF%831.jpg" alt=""></p>
<h3 id="【Photoshop】易拉宝"><a href="#【Photoshop】易拉宝" class="headerlink" title="【Photoshop】易拉宝"></a>【Photoshop】易拉宝</h3><p><img src="http://opms50p58.bkt.clouddn.com/%E6%98%93%E6%8B%89%E5%AE%9D1.jpg" alt=""><br><img src="http://opms50p58.bkt.clouddn.com/%E6%98%93%E6%8B%89%E5%AE%9D2.jpg" alt=""></p>
<h3 id="【会声会影】西电华为俱乐部宣传片"><a href="#【会声会影】西电华为俱乐部宣传片" class="headerlink" title="【会声会影】西电华为俱乐部宣传片"></a>【会声会影】西电华为俱乐部宣传片</h3><p><a href="http://mp.weixin.qq.com/s/uGOI-WTesQeGVgXca3hdMw" target="_blank" rel="external">纳新宣传</a></p>
<h3 id="【会声会影】2016西电华为创新俱乐部六周年庆"><a href="#【会声会影】2016西电华为创新俱乐部六周年庆" class="headerlink" title="【会声会影】2016西电华为创新俱乐部六周年庆"></a>【会声会影】2016西电华为创新俱乐部六周年庆</h3><p><a href="http://v.qq.com/iframe/player.html?vid=m0344vli6da&amp;tiny=0&amp;auto=0" target="_blank" rel="external">西电华俱六周年庆</a></p>
<p><a href="http://v.youku.com/v_show/id_XNzIzMzIyODky.html" target="_blank" rel="external">西理工科协宣传</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里是我的一些PS、视频作品。&lt;br&gt;不想做好美工的程序员不是好程序员！&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="PS" scheme="https://x-nicolo.github.io/tags/PS/"/>
    
      <category term="视频" scheme="https://x-nicolo.github.io/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="作品" scheme="https://x-nicolo.github.io/tags/%E4%BD%9C%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>【爬虫】模拟登录西电睿思领金币</title>
    <link href="https://x-nicolo.github.io/2017/08/29/%E3%80%90%E7%88%AC%E8%99%AB%E3%80%91%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E8%A5%BF%E7%94%B5%E7%9D%BF%E6%80%9D%E9%A2%86%E9%87%91%E5%B8%81/"/>
    <id>https://x-nicolo.github.io/2017/08/29/【爬虫】模拟登录西电睿思领金币/</id>
    <published>2017-08-29T08:21:22.000Z</published>
    <updated>2017-08-29T08:21:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="爬虫入门"><a href="#爬虫入门" class="headerlink" title="爬虫入门"></a>爬虫入门</h3><p>之前对爬虫做了点杂乱的简单学习：  </p>
<ul>
<li><a href="ttps://x-nicolo.github.io/2016/09/24/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%88%AC%E8%99%AB/">爬虫入门（一）：轻量级爬虫</a>  </li>
<li><a href="https://x-nicolo.github.io/2016/09/25/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/">爬虫入门（二）：单线程爬虫</a></li>
<li><a href="https://x-nicolo.github.io/2016/10/10/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ABeautifulSoup/">爬虫入门（三）：BeautifulSoup</a></li>
<li><a href="https://x-nicolo.github.io/2016/10/14/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Aurllib2/">爬虫入门（四）：urllib2</a></li>
</ul>
<h3 id="西电教务处爬虫及数据处理"><a href="#西电教务处爬虫及数据处理" class="headerlink" title="西电教务处爬虫及数据处理"></a>西电教务处爬虫及数据处理</h3><p>对西电研究生教务处系统进行了相关数据的爬取：  </p>
<ul>
<li><a href="https://x-nicolo.github.io/2016/12/12/%E7%88%AC%E7%BD%91%E9%A1%B5%E3%80%81%E7%88%AC%E5%9B%BE%E7%89%87%E3%80%81%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/">【爬虫】（一）：爬网页、爬图片、自动登录</a></li>
<li><a href="https://x-nicolo.github.io/2016/12/15/%E7%88%AC%E5%8F%96%E8%A5%BF%E7%94%B5%E6%95%99%E5%8A%A1%E5%A4%84%E6%88%90%E7%BB%A9/">【爬虫】（二）爬取西电教务处成绩</a></li>
<li><a href="https://x-nicolo.github.io/2016/12/16/%E7%88%AC%E8%99%AB%E4%B9%8B%E5%A4%84%E7%90%86%E7%AE%80%E5%8D%95%E9%AA%8C%E8%AF%81%E7%A0%81/">【爬虫】（三）爬虫之处理简单验证码</a></li>
<li><a href="https://x-nicolo.github.io/2017/02/03/%E7%88%AC%E8%99%AB-%E8%A5%BF%E7%94%B5%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F-%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/">【爬虫】（四）西电研究生教务系统技术文档</a></li>
<li><a href="https://x-nicolo.github.io/2017/02/14/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8BCSV/">【爬虫】（五）数据存储之CSV</a></li>
<li><a href="https://x-nicolo.github.io/2017/02/21/Python%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8BMySQL%EF%BC%88%E4%B8%8A%EF%BC%89/">【爬虫】（六）Python数据存储之MySQL（上）</a></li>
<li><a href="https://x-nicolo.github.io/2017/02/28/Python%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8BMySQL%EF%BC%88%E4%B8%8B%EF%BC%89/">【爬虫】（七）Python数据存储之MySQL（下）</a></li>
<li><a href="https://x-nicolo.github.io/2017/03/14/Python%E4%B9%8B%E7%88%AC%E8%99%AB%E5%92%8C%E6%95%B0%E6%8D%AE%E5%B0%8F%E8%A7%A3%E6%9E%90/">【爬虫】（八）Python之爬虫和数据小解析</a></li>
<li><a href="https://x-nicolo.github.io/2017/03/14/Java%E8%B0%83%E7%94%A8Python%E7%9A%84%E9%94%99%E8%AF%AF-1/">Java调用Python的错误</a></li>
<li><a href="https://x-nicolo.github.io/2017/06/05/%E3%80%90%E6%9B%B4%E6%AD%A3%E3%80%91Java%E8%B0%83%E7%94%A8Python/">【更正】Java调用Python</a></li>
</ul>
<a id="more"></a>
<h3 id="西电睿思爬虫"><a href="#西电睿思爬虫" class="headerlink" title="西电睿思爬虫"></a>西电睿思爬虫</h3><p>西电睿思就是西电学子们的一个家。<br>有个长久的打算，就是希望年底能对睿思做一个报告分析。了解西电er关心什么。</p>
<h4 id="睿思爬虫领金币"><a href="#睿思爬虫领金币" class="headerlink" title="睿思爬虫领金币"></a>睿思爬虫领金币</h4><p>第一个就拿领取金币来说吧。OK！<br>剩下待定，慢慢来。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> urllib.request, urllib.error, urllib.parse</div><div class="line"><span class="keyword">import</span> urllib.request, urllib.parse, urllib.error</div><div class="line"><span class="keyword">import</span> http.cookiejar</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> imp</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">imp.reload(sys) </div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hash</span><span class="params">(url, opener)</span>:</span></div><div class="line">    c = opener.open(url).read()</div><div class="line">    c=c.decode(<span class="string">'utf-8'</span>)</div><div class="line">    patt = re.compile(<span class="string">r'.*?name="formhash".*?value="(.*?)".*?'</span>)</div><div class="line">    formhash = patt.search(c)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> formhash:</div><div class="line">        <span class="keyword">raise</span> Exception(<span class="string">'GET formhash Fail!'</span>)</div><div class="line">    formhash = formhash.group(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> formhash</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username=None, password=None)</span>:</span></div><div class="line">        self.front_page_url = <span class="string">'http://rs.xidian.edu.cn/'</span></div><div class="line">        self.loginurl = <span class="string">'http://rs.xidian.edu.cn/member.php?mod=logging&amp;action=login&amp;loginsubmit=yes&amp;infloat=yes&amp;lssubmit=yes'</span></div><div class="line">        self.shuiQu_url = <span class="string">'http://rs.xidian.edu.cn/forum.php?mod=forumdisplay&amp;fid=72&amp;page=1'</span></div><div class="line"></div><div class="line">        self.postdata = urllib.parse.urlencode(&#123;</div><div class="line">        <span class="string">'username'</span>: username,</div><div class="line">        <span class="string">'password'</span>: password,</div><div class="line">        <span class="string">'quickforward'</span>: <span class="string">'yes'</span>,</div><div class="line">        <span class="string">'handlekey'</span>: <span class="string">'ls'</span>,</div><div class="line">        &#125; ).encode(encoding=<span class="string">'UTF8'</span>)</div><div class="line"></div><div class="line">   </div><div class="line">        self.headers   = &#123;</div><div class="line">            <span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:29.0) Gecko/20100101 Firefox/29.0'</span> </div><div class="line">        &#125;</div><div class="line"></div><div class="line">    </div><div class="line">        self.cookieJar = http.cookiejar.CookieJar()</div><div class="line">        self.opener    = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.cookieJar))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        req = urllib.request.Request(</div><div class="line">            url = self.loginurl,</div><div class="line">            data= self.postdata,</div><div class="line">            headers = self.headers</div><div class="line">        )</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            response = self.opener.open(req)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </div><div class="line">            print(e)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"登录成功！抓取金币开始！"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">comment</span><span class="params">(self, tid)</span>:</span></div><div class="line">        url = self.front_page_url + <span class="string">'forum.php?mod=post&amp;action=reply&amp;fid=72&amp;tid=%s&amp;extra=&amp;replysubmit=yes&amp;infloat=yes&amp;handlekey=fastpost'</span> % str(tid)</div><div class="line"></div><div class="line">        formhash = get_hash(<span class="string">'http://rs.xidian.edu.cn/forum.php?mod=viewthread&amp;tid=%s'</span>%tid, self.opener)</div><div class="line"></div><div class="line">        data = urllib.parse.urlencode(&#123;</div><div class="line">                    <span class="string">'formhash'</span>: formhash,</div><div class="line">                    <span class="string">'message'</span>: <span class="string">'帮顶                                      '</span>,</div><div class="line">                    <span class="string">'usesig'</span>: <span class="string">'1'</span>,</div><div class="line">        &#125;).encode(encoding=<span class="string">'UTF8'</span>)</div><div class="line"></div><div class="line">        req = urllib.request.Request(</div><div class="line">            url = url,</div><div class="line">            data= data,</div><div class="line">            headers = self.headers</div><div class="line">        )</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            response = self.opener.open(req)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </div><div class="line">            print(e)</div><div class="line"></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> <span class="string">'成功'</span> <span class="keyword">in</span> response.read(<span class="number">500</span>).decode(<span class="string">'utf-8'</span>):</div><div class="line">                print(<span class="string">'水了一贴'</span>)</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">guanShui</span><span class="params">(self)</span>:</span></div><div class="line">        req = self.opener.open(self.shuiQu_url)</div><div class="line">        decode_req = req.read().decode(<span class="string">'utf'</span>)</div><div class="line">        items = re.findall(<span class="string">'.*?&lt;tbody id="no.*?&lt;tr.*?&lt;td.*?&lt;th.*?&lt;a.*?&lt;a href="(.*?)".*?&gt;(.*?)&lt;/a&gt;.*?&lt;/tbody&gt;'</span>,decode_req,re.S)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> items:</div><div class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</div><div class="line">                <span class="keyword">if</span> <span class="string">'金币'</span> <span class="keyword">in</span> item[<span class="number">1</span>]:    <span class="comment"># topic title</span></div><div class="line">                    topic_url = item[<span class="number">0</span>].replace(<span class="string">'&amp;amp;'</span>, <span class="string">'&amp;'</span>)   <span class="comment"># topic url</span></div><div class="line">                    print(item[<span class="number">1</span>])</div><div class="line">                    tid = re.match(<span class="string">r'.*?tid=(\d+)'</span>, topic_url).groups()[<span class="number">0</span>]</div><div class="line">                    self.comment(tid)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'没有散金币主题'</span>)</div><div class="line">            </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(<span class="string">"Hello!Rser! 正在登录！···"</span>) </div><div class="line">    username = <span class="string">''</span></div><div class="line">    password = <span class="string">''</span></div><div class="line"></div><div class="line">    my_spider = Spider(username=username, password=password)</div><div class="line">    my_spider.login()</div><div class="line">    my_spider.guanShui()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;爬虫入门&quot;&gt;&lt;a href=&quot;#爬虫入门&quot; class=&quot;headerlink&quot; title=&quot;爬虫入门&quot;&gt;&lt;/a&gt;爬虫入门&lt;/h3&gt;&lt;p&gt;之前对爬虫做了点杂乱的简单学习：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;ttps://x-nicolo.github.io/2016/09/24/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%88%AC%E8%99%AB/&quot;&gt;爬虫入门（一）：轻量级爬虫&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2016/09/25/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/&quot;&gt;爬虫入门（二）：单线程爬虫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2016/10/10/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ABeautifulSoup/&quot;&gt;爬虫入门（三）：BeautifulSoup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2016/10/14/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Aurllib2/&quot;&gt;爬虫入门（四）：urllib2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;西电教务处爬虫及数据处理&quot;&gt;&lt;a href=&quot;#西电教务处爬虫及数据处理&quot; class=&quot;headerlink&quot; title=&quot;西电教务处爬虫及数据处理&quot;&gt;&lt;/a&gt;西电教务处爬虫及数据处理&lt;/h3&gt;&lt;p&gt;对西电研究生教务处系统进行了相关数据的爬取：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2016/12/12/%E7%88%AC%E7%BD%91%E9%A1%B5%E3%80%81%E7%88%AC%E5%9B%BE%E7%89%87%E3%80%81%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/&quot;&gt;【爬虫】（一）：爬网页、爬图片、自动登录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2016/12/15/%E7%88%AC%E5%8F%96%E8%A5%BF%E7%94%B5%E6%95%99%E5%8A%A1%E5%A4%84%E6%88%90%E7%BB%A9/&quot;&gt;【爬虫】（二）爬取西电教务处成绩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2016/12/16/%E7%88%AC%E8%99%AB%E4%B9%8B%E5%A4%84%E7%90%86%E7%AE%80%E5%8D%95%E9%AA%8C%E8%AF%81%E7%A0%81/&quot;&gt;【爬虫】（三）爬虫之处理简单验证码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2017/02/03/%E7%88%AC%E8%99%AB-%E8%A5%BF%E7%94%B5%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F-%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/&quot;&gt;【爬虫】（四）西电研究生教务系统技术文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2017/02/14/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8BCSV/&quot;&gt;【爬虫】（五）数据存储之CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2017/02/21/Python%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8BMySQL%EF%BC%88%E4%B8%8A%EF%BC%89/&quot;&gt;【爬虫】（六）Python数据存储之MySQL（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2017/02/28/Python%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8BMySQL%EF%BC%88%E4%B8%8B%EF%BC%89/&quot;&gt;【爬虫】（七）Python数据存储之MySQL（下）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2017/03/14/Python%E4%B9%8B%E7%88%AC%E8%99%AB%E5%92%8C%E6%95%B0%E6%8D%AE%E5%B0%8F%E8%A7%A3%E6%9E%90/&quot;&gt;【爬虫】（八）Python之爬虫和数据小解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2017/03/14/Java%E8%B0%83%E7%94%A8Python%E7%9A%84%E9%94%99%E8%AF%AF-1/&quot;&gt;Java调用Python的错误&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://x-nicolo.github.io/2017/06/05/%E3%80%90%E6%9B%B4%E6%AD%A3%E3%80%91Java%E8%B0%83%E7%94%A8Python/&quot;&gt;【更正】Java调用Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://x-nicolo.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://x-nicolo.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>MySQL连接错误</title>
    <link href="https://x-nicolo.github.io/2017/08/21/MySQL%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF/"/>
    <id>https://x-nicolo.github.io/2017/08/21/MySQL连接错误/</id>
    <published>2017-08-21T09:38:42.000Z</published>
    <updated>2017-08-21T09:38:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2847713-5ab02602ced5504d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>ERROR 1045 (28000): Access denied for user’root’@’localhost’(using password:YES)</p>
<a id="more"></a>
<p>1.问题：命令提示符窗口，在MySQL安装bin目录下运行指令：</p>
<p>X:<em>Location</em>\bin\mysql&gt; mysql -u root -p<br>（每个人根据自己路劲选择不同目录。）<br>出现：</p>
<p>Enter password:<br>输入或者不输入回车后出现错误：</p>
<p>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: YES)<br>或</p>
<p>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)<br>这时去你的根目录配置你的mysql配置文件my.ini<br>如果还美哦与搭建环境请参考：<br>MySQL-5.6.13免安装版配置方法</p>
<p>记事本打开my.ini，在[mysqld]这个条目下加入</p>
<p>skip-grant-tables<br>保存退出后重启mysql<br>重启方法1：<br>1.点击“开始”-&gt;“运行”(快捷键Win+R)。<br>2.启动：输入 net stop mysql<br>3.停止：输入 net start mysql<br>重启方法2：<br>如果1不行，到 计算机管理–&gt;服务和应用程序–&gt;服务–&gt;MYSQL–&gt;右键–&gt;启动.</p>
<p>这时候在cmd里面输入mysql -u root -p就可以不用密码登录了，出现password：的时候直接回车可以进入，<br>不会出现ERROR 1045 (28000)，没有权限很多操作都会受限制。</p>
<p>下面这样（斜体为操作后命令提示的结果，不输入）：<br>1.进入mysql数据库：</p>
<p>mysql&gt; use mysql;<br>Database changed<br>2.给root用户设置新密码，新密码自己输：</p>
<p>mysql&gt; update user set password=password(“新密码”) where user=”root”;<br>警告：这个命令是5.7之前一些老版本的，如果你用的新的，这样输入会出现错误：</p>
<p>ERROR 1054 (42S22): Unknown column ‘password’ in ‘fie<br>这是因为5.7版本下的mysql数据库下已经没有password这个字段了，password字段改成了</p>
<p>authentication_string<br>所以，应该输入如下命令：</p>
<p>update mysql.user set authentication_string=password(‘root’) where user=’root’ ;<br>Query OK, 1 rows affected (0.01 sec) Rows matched: 1 Changed: 1 Warnings: 0<br>3.刷新数据库</p>
<p>mysql&gt; flush privileges;<br>Query OK, 0 rows affected (0.00 sec)<br>4.退出mysql：</p>
<p>mysql&gt; quit<br>Bye<br>5.改好之后，再修改一下my.ini这个文件，把刚才加入my.ini文件的的”skip-grant-tables”这行删除，保存退出再重启mysql就可以了。<br>重启方法见上文。</p>
<p>到这里以为就完事大吉了，但是，并没有。。</p>
<p>进入mysql后，有出现了如下错误：</p>
<p>ERROR 1820 (HY000): You must SET PASSWORD before executing this statement<br>坑了个爹的。。。</p>
<p>最后发现还需要重设密码！！！（难道刚刚的操作都是在研究如何吃屎么。。。）</p>
<p>解决方法如下：</p>
<p>mysql&gt; SET PASSWORD = PASSWORD(‘123456’);<br>对你没看错，就是在设置一边密码。。。当然你不用非弄成123456，这个随意了。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2847713-5ab02602ced5504d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;ERROR 1045 (28000): Access denied for user’root’@’localhost’(using password:YES)&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="bug" scheme="https://x-nicolo.github.io/tags/bug/"/>
    
      <category term="MySQl" scheme="https://x-nicolo.github.io/tags/MySQl/"/>
    
  </entry>
  
  <entry>
    <title>SSM简单介绍</title>
    <link href="https://x-nicolo.github.io/2017/08/09/SSM%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>https://x-nicolo.github.io/2017/08/09/SSM简单介绍/</id>
    <published>2017-08-09T03:22:27.000Z</published>
    <updated>2017-08-09T03:22:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>SSM：Struts、Spring、Mybatis<br>SSM三层集成框架系统总体设计：模块划分、数据库表，存储过程</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>J2EE框架是一种非常流行的Web开发框架。J2EE框架完整地定义了一套标准的应用开发体系结构和部署环境。基于SSH的轻量级组件模型的出现，为中小企业的应用开发提供了新的解决问题的方法。但SSH框架中持久层技术Hibernate是一种“全自动”式的ORM实现方案，该方案对数据库设计模式要求苛刻，且限制使用存储过程，给数据操作较多、表结构多变的系统的开发带来了很大的不便。SSM轻量级开发框架解决了这个问题，该框架中的数据持久层技术是MyBatis。MyBatis是一种“半自动”式的ORM实现方案，它在SQL开发的工作量和数据库移植性方面的让步，为系统设计提供了最大的自由空间。<br><a id="more"></a></p>
<h2 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h2><h3 id="J2EE简介"><a href="#J2EE简介" class="headerlink" title="J2EE简介"></a>J2EE简介</h3><p>基于J2EE的Web应用被划分为表示层、控制层、业务逻辑层和数据持久层，每一层在系统实现中起到不同的作用。这四层开发模式能够更好的实现“高内聚、低耦合”。将项目划分为不同的层次，有利于系统的开发、部署和维护。</p>
<h3 id="J2EE的分层"><a href="#J2EE的分层" class="headerlink" title="J2EE的分层"></a>J2EE的分层</h3><ul>
<li>表现层：JSP页面+JavaScript。表现层主要负责处理客户端界面。它是Web应用的末端，通过页面元素标签的布局和CSS样式，进行页面设计。表现层利用轻量级JavaScript脚本技术–jQuery进行页面数据处理。Ajax技术可以实现页面局部刷新，给用户提供良好的界面体验效果。</li>
<li>控制层：JavaBean(处理前后台参数传递)+Action（控制页面跳转+逻辑控制）。控制层是表现层和业务逻辑层之间的桥梁。控制层负责接收和响应用户的请求；封装用户数据；将用户请求提交给业务逻辑层进行处理并将处理结果通过EJB、页面标签或回调函数返回给客户端界面。</li>
<li>业务逻辑层：Service接口+具体实现（调用Dao组件，处理业务逻辑）。业务逻辑层主要负责业务逻辑，是整个应用的核心。业务逻辑层关联控制层和数据持久层。该层一方面接收控制层传入的请求数据，通过业务逻辑处理把处理结果数据作为响应返回给控制层；另一方面为数据持久层提供操作的数据，并接收数据持久层返回的数据。</li>
<li>数据持久层：Dao接口+SQL具体实现+数据库。数据持久层负责与数据库交互。数据持久层负责在数据对象和关系数据库之间建立一种映射关系，实现对数据的持久化访问。数据持久层提供了数据访问方法，能够使程序员避免手工编写程序访问数据持久层。数据持久层能够完成对各种数据进行持久化的编程工作，并为业务逻辑层提供服务。</li>
</ul>
<h4 id="表示层框架"><a href="#表示层框架" class="headerlink" title="表示层框架"></a>表示层框架</h4><p>Struts 1.0/Struts 2.0是当前Web系统开发使用最广泛的表示层框架技术。<br>Struts1.0是最早的MVC框架，包括模型、视图、控制器三部分。模型由实现业务逻辑的JavaBean构成；控制层由ActionServlet来实现；视图主要由一组JSP文件构成。</p>
<h4 id="业务逻辑层框架"><a href="#业务逻辑层框架" class="headerlink" title="业务逻辑层框架"></a>业务逻辑层框架</h4><p>Spring是开发人员首选的业务逻辑层轻量级解决方案。Spring被称为JavaEE应用的一站式解决方案。Spring本身提供了一个设计优良的MVC框架–SpringMVC，该框架一直被数据操作量少的小型项目广泛使用。<br>Spring是J2EE框架的中间层容器，具有强大的整合框架能力。Spring可以向上与MVC框架无缝整合，向下可以与各种持久层框架无缝整合。Spring框架能够通过配置文件很好的将控制层框架和数据持久层框架整合到一起。强大的整合框架能力使之成业务逻辑层首选实现框架。</p>
<h4 id="数据持久层框架"><a href="#数据持久层框架" class="headerlink" title="数据持久层框架"></a>数据持久层框架</h4><p>数据持久层框架的作用是将数据库存储从服务层中分离出来，降低耦合度。持久层设计的关键问题就是如何在对象和关系型数据库之间建立一种映射关系。持久层框架现分为两大主流：自己编写JDBC实现SQL语句；使用O/RMapping技术实现的“全自动”式（如Hibernate）和“半自动”式（如iBatis,MyBatis）的ORM实现方案。</p>
<h5 id="JDBC框架"><a href="#JDBC框架" class="headerlink" title="JDBC框架"></a>JDBC框架</h5><p>JDBC框架是一种能够解决性能障碍的持久层框架。该框架只有在请求的时候才能被调用，能够节省内存。可是JDBC的实现当时需要开发人员非常精通SQL和JDBC，需要写很多的DAO方法，而且每一次数据请求都要开启和关闭数据连接。</p>
<h5 id="Hibernate框架"><a href="#Hibernate框架" class="headerlink" title="Hibernate框架"></a>Hibernate框架</h5><p>JDBC框架适合小型简单项目。对于企业级项目，Hibernate是被广为推行的一个运行效率较高的持久层框架。它将Java对象（POJO）映射成持久化类，使应用程序能够以面向对象的方式来操作POJO，并将这些操作转换为底层的SQL语句来执行。企业级大型项目使用Hibernate，能够大大提高项目开发效率。</p>
<h5 id="MyBatis框架介绍"><a href="#MyBatis框架介绍" class="headerlink" title="MyBatis框架介绍"></a>MyBatis框架介绍</h5><p>MyBatis是iBatis的升级版本。MyBatis为Java提供了更为强大的功能。</p>
<ul>
<li>MyBatis实现了Dao接口绑定，使用更加方便。MyBatis使用简单的XML或注解用于配置和原始映射，将接口和JAVA的POJOs(Plan Old JAVA Objects，普通的JAVA对象)映射成数据库中的记录。</li>
<li>对象关系映射的改进，数据操作执行效率更高。在MyBatis中，除了兼容ibatis2.x中的“嵌套查询”方式外，还提供了直接“嵌套结果”的方式，其效果相当于直接通过一句SQL语句将查询出的数据传输对象(DTO)自动封装成所需要的对象。</li>
<li>MyBatis消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。</li>
</ul>
<h2 id="基于J2EE的SSM框架开发技术"><a href="#基于J2EE的SSM框架开发技术" class="headerlink" title="基于J2EE的SSM框架开发技术"></a>基于J2EE的SSM框架开发技术</h2><p>SSM框架是由Struts，Spring和MyBatis三个框架集成的。SSM框架自上而下被分别分为表现层、控制层、业务逻辑层和数据持久层。</p>
<p><img src="http://opms50p58.bkt.clouddn.com/SSM%E6%A1%86%E6%9E%B6.png" alt="SSM框架"></p>
<h3 id="SSM框架的集成"><a href="#SSM框架的集成" class="headerlink" title="SSM框架的集成"></a>SSM框架的集成</h3><p>业务逻辑层利用Spring框架的依赖注入实现对业务逻辑接口和DAO接口的实例<br>托管；在对象关系映射方面，利用Spring对数据库连接池的托管和对MyBatis框架的<br>支持；开发人员需要完成Spring配置文件applicationContext.xml中对数据源以及不同<br>模块所对应的bean进行配置，同时还要定义业务逻辑接口及其实现。<br>数据持久层利用MyBatis来实现半自动化对象的关系映射。这种方式为系统设计<br>提供了更大的自由空间，开发人员可以编写具体的SQL语句或存储过程。另外，开<br>发人员需要完成对MyBatis的配置文件SqlMapConfig.xml的配置，来实现DAO接口<br>及其实现的映射。</p>
<h3 id="SSM框架的实现原理"><a href="#SSM框架的实现原理" class="headerlink" title="SSM框架的实现原理"></a>SSM框架的实现原理</h3><p>以“流程流转角色列表框的数据显示”功能的实现为例，来详细描述表示层、控制层、业务逻辑层和数据持久层的具体实现细节，以此介绍SSM框架的实现原理。表现层负责页面的设计以及处理用户请求，该层使用DIV分区和CSS样式表进行元素布局并使用jQuery提供的post方法来实现用户的请求与响应。控制层、业务逻辑层和数据持久层进行后台业务处理，通过层与层之间的相互交互来实现用户数据的处理和响应。</p>
<p><img src="http://opms50p58.bkt.clouddn.com/SSM%E6%B5%81%E7%A8%8B.png" alt="SSM流程流转"></p>
<ul>
<li>表现层代码实现包括新建列表元素、获取用户角色、通过AJAX函数进行前后台数据交互这三部分。</li>
<li>控制层Struts2框架需要进行web.xml文件、struts.xml文件和Spring的配置文件ApplicationContext.xml等文件的配置。web.xml文件需要配置请求过滤器；struts.xml文件和ApplicationContext.xml文件用来配置请求转发路径。</li>
</ul>
<h3 id="系统架构的设计"><a href="#系统架构的设计" class="headerlink" title="系统架构的设计"></a>系统架构的设计</h3><p>C／S架构与B／S架构是常用的两种系统架构。C／S架构即客户机一服务器架构。C／S架构充分利用客户端和服务器端的硬件环境，将任务合理分配到客户端和服务器端来实现，降低了系统的通讯开销。B／S架构即浏览器一服务器结构。在这种架构下，用户工作界面通过浏览器来实现，事务逻辑在服务器端实现。下文将简要的介绍两种框架的优缺点。</p>
<h4 id="C／S架构的优缺点"><a href="#C／S架构的优缺点" class="headerlink" title="C／S架构的优缺点"></a>C／S架构的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>服务器运行时的数据负荷轻。C／S架构的体系结构由客户端应用程序和数据库服务器程序组成。客户端应用程序运行于用户自己的电脑，当需要数据操作时，客户端程序自动寻找服务器程序并发送请求。服务器程序按照规则作出应答，返回结果。该过程简单，服务器的数据负荷低。</p>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>系统维护量大。在系统运行时，需要在客户端和服务器端建立数据同步，因此，需要在两者之间建立实时的通讯连接，维持两地的数据库服务器在线运行。网络管理人员既要对服务器维护管理，又要对客户端维护管理，同时还需要较高的投资和技术支持，维护成本高。</p>
<h4 id="B／S架构的优缺点"><a href="#B／S架构的优缺点" class="headerlink" title="B／S架构的优缺点"></a>B／S架构的优缺点</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><p>系统维护量少，软件升级方便。B／S架构的软件系统只需管理服务器即可，客户端使用浏览器，一般不需要做维护。随着系统版本的不断升级，浏览器的升级和维护也越来越容易，使用起来越来越简单。</p>
<p>#####　缺点<br>服务器运行时的数据负荷重。B／S架构的系统软件安装在服务器端，事务逻辑在服务器端来实现，所有应用服务器运行数据负荷较重。一旦发生服务器“崩溃”，后果不堪设想，因此需要备有备份数据库的服务器。</p>
<p>通过以上两种架构的优缺点的比较，可以发现：<br>1)B／S架构的系统维护工作量比C／S架构的少。<br>2)B／S架构降低了客户端电脑负荷，降低了总成本。<br>3)从数据一致性和实时性方面考虑，B／S架构优于C／S架构。</p>
<h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><p>MVC是一种架构型模式，它本身不引入新的功能，只是知道我们把Web应用结构做的更加合理，实现逻辑与页面相分离。在MVC模式中，应用程序被划分为了模型、视图和控制器三个部分。</p>
<ul>
<li>模型部分包含了应用程序的业务逻辑和业务数据</li>
<li>视图部分封装了应用程序的输出形式，也就是通常所说的页面或者是界面</li>
<li>控制器部分负责协调模型和视图，根据用户请求来选择要调用哪个模型来处理业务，以及最终由哪个视图为用户做出应答。</li>
</ul>
<p>MVC的组件关系图描述了模型、视图、控制器这三个部分的交互关系，下面按照交互顺序来详细描述一下它们的交互关系：</p>
<ul>
<li>首先是展示视图给用户，用户在这个视图上进行操作，并填写一些业务数据</li>
<li>然后用户会点击提交按钮来发出请求</li>
<li>视图发出的用户请求会到达控制器，在请求中包含了想要完成什么样的业务功能以及相关的数据</li>
<li>控制器会来处理用户的请求，会把请求中的数据进行封装，然后选择并调用合适的模型，请求模型进行装状态更新，然后选择接下来要展示给用户的视图</li>
<li>模型会去处理用户请求的业务功能，同时进行模型状态的维护和更新</li>
<li>当模型状态发生改变的时候，模型会通知相应的视图，告诉视图它的状态发生了改变</li>
<li>视图接到模型的通知后，会向模型进行状态查询，获取需要展示的数据，然后按照视图本身的展示方式，把这些数据展示出来。接下来就是等待用户下一次操作，再次从头轮回了。</li>
</ul>
<h3 id="Ajax技术"><a href="#Ajax技术" class="headerlink" title="Ajax技术"></a>Ajax技术</h3><p>当浏览器向Web服务器发送一个请求时，服务器接收并处理传来的表单，然后返回一个新的页面。这个做法浪费了许多宽带，因为在前后两个页面中的大部分HTML代码是相同的。而出现的Ajax技术无需重新加载相同的页面，只是通过在后台与服务器进行少量数据交换，使得页面实现异步更新，不仅Web服务器的处理时间大大减少了，用户界面的响应时间也快多了。</p>
<p>Ajax技术在大多数现代浏览器中都能使用，而且不需要任何专门的软件和硬件。Ajax是一种客户端方法，它并不关心服务器是什么。Ajax是由HTML、JavaScript技术、DHTML和DOM组成。</p>
<p>Ajax应用程序的优势在于以下3方面。</p>
<ul>
<li>通过异步模式，提升了用户体验。</li>
<li>优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用</li>
<li>Ajax引擎在客户端运行，承担了一部分本来由服务器承担的工作，从而减少了大用户量下的服务器负载。</li>
</ul>
<h3 id="jQuery技术"><a href="#jQuery技术" class="headerlink" title="jQuery技术"></a>jQuery技术</h3><p>jQuery凭借简介的语法和跨平台的兼容性，极大的简化了JavaScript开发遍历HTML文档、操作DOM、处理事件、执行动画和开发Ajax的操作。而独特而又优雅的代码风格改变了JavaScript程序员的设计思路和编写程序的方式。</p>
<p>jQuery强调的理念是写的少，做的多。jQuery独特的选择器、链式的DOM操作、事件处理机制和封装完善的Ajax都是其他JavaScript库望尘莫及的。概况起来，jQuery有以下优势：开源、轻量级、强大的选择器、出色的DOM操作的封装、可靠的事件处理机制、完善的Ajax、不污染顶级变量、出色的浏览器兼容性、链式操作方式、丰富的插件支持和完善文档等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SSM：Struts、Spring、Mybatis&lt;br&gt;SSM三层集成框架系统总体设计：模块划分、数据库表，存储过程&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;J2EE框架是一种非常流行的Web开发框架。J2EE框架完整地定义了一套标准的应用开发体系结构和部署环境。基于SSH的轻量级组件模型的出现，为中小企业的应用开发提供了新的解决问题的方法。但SSH框架中持久层技术Hibernate是一种“全自动”式的ORM实现方案，该方案对数据库设计模式要求苛刻，且限制使用存储过程，给数据操作较多、表结构多变的系统的开发带来了很大的不便。SSM轻量级开发框架解决了这个问题，该框架中的数据持久层技术是MyBatis。MyBatis是一种“半自动”式的ORM实现方案，它在SQL开发的工作量和数据库移植性方面的让步，为系统设计提供了最大的自由空间。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://x-nicolo.github.io/tags/java/"/>
    
      <category term="SSM" scheme="https://x-nicolo.github.io/tags/SSM/"/>
    
      <category term="后台" scheme="https://x-nicolo.github.io/tags/%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Nxet!</title>
    <link href="https://x-nicolo.github.io/2017/08/08/%E8%AF%95%E8%AF%95/"/>
    <id>https://x-nicolo.github.io/2017/08/08/试试/</id>
    <published>2017-08-08T10:45:44.000Z</published>
    <updated>2017-08-08T10:45:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello,Next!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello,Next!&lt;/p&gt;

    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="test" scheme="https://x-nicolo.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>JSP</title>
    <link href="https://x-nicolo.github.io/2017/07/31/JSP/"/>
    <id>https://x-nicolo.github.io/2017/07/31/JSP/</id>
    <published>2017-07-31T07:23:37.000Z</published>
    <updated>2017-07-31T08:52:48.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="window下Tomcat的下载安装及配置"><a href="#window下Tomcat的下载安装及配置" class="headerlink" title="window下Tomcat的下载安装及配置"></a>window下Tomcat的下载安装及配置</h2><p>1、安装<br>2、基本语法<br>3、项目导出及部署<br>4、JSP注释<br><a id="more"></a></p>
<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>绿色软件，下载解压即安装成功。</p>
<h4 id="安装目录："><a href="#安装目录：" class="headerlink" title="安装目录："></a>安装目录：</h4><ul>
<li>bin:存放启动和关闭tomcat的脚本</li>
<li>conf：存放tomcat服务器的各种配置文件</li>
<li>lib：存放tomcat的依赖jar包</li>
<li>logs：存放tomcat执行时生成的日志文件</li>
<li>temp：存放一些临时文件</li>
<li>webapps：存放web应用</li>
<li>work：存放一些中间文件</li>
<li>LICENSE</li>
<li>NOTTICE</li>
<li>tomcat.ico</li>
<li>Uninstall.exe<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4>安装目录</li>
</ul>
<h3 id="2、基本语法"><a href="#2、基本语法" class="headerlink" title="2、基本语法"></a>2、基本语法</h3><ol>
<li>用 JSP 向浏览器输出 hello world<figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=ISO-8859-1"</span></span></div><div class="line"><span class="perl">    pageEncoding=<span class="string">"ISO-8859-1"</span></span><span class="xml">%&gt;</span></div><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></div><div class="line"><span class="xml">JSP表达式输出：<span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl"><span class="string">"hello world"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"></span></div><div class="line"><span class="perl">String str = <span class="string">"hello world"</span>;</span></div><div class="line"><span class="perl">out.<span class="keyword">print</span>(str);</span></div><div class="line"><span class="perl"></span></div><div class="line"><span class="perl"></span><span class="xml">%&gt;</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="3、项目导出及部署"><a href="#3、项目导出及部署" class="headerlink" title="3、项目导出及部署"></a>3、项目导出及部署</h3><ul>
<li>export-warfile</li>
<li>将war文件放进.\Tomcat8\webapps目录下。</li>
<li>启动tomcat后war文件自动解压</li>
<li>浏览器浏览localhost:8080/JSPStyudy/01/hello.jsp</li>
</ul>
<h3 id="4、JSP注释"><a href="#4、JSP注释" class="headerlink" title="4、JSP注释"></a>4、JSP注释</h3><p>HTML注释：<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- this is body--&gt;</span></span></div><div class="line"><span class="xml"><span class="comment">&lt;!-- today is </span></span><span class="vbscript">&lt;%=<span class="keyword">new</span> java.util.<span class="built_in">Date</span>().toString() %&gt;</span><span class="xml"><span class="comment"> --&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>JSP注释：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;%<span class="comment">--</span></div><div class="line">this <span class="keyword">is</span> JSP comments.</div><div class="line"><span class="comment">--%&gt;</span></div></pre></td></tr></table></figure></p>
<p>JSP程序段中的注释：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%<span class="comment">--</span></div><div class="line">   //<span class="built_in">String</span> str = <span class="string">"hello world"</span>; 单行注释</div><div class="line">   <span class="comment">/*多行注释*/</span></div><div class="line"><span class="comment">--%&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;window下Tomcat的下载安装及配置&quot;&gt;&lt;a href=&quot;#window下Tomcat的下载安装及配置&quot; class=&quot;headerlink&quot; title=&quot;window下Tomcat的下载安装及配置&quot;&gt;&lt;/a&gt;window下Tomcat的下载安装及配置&lt;/h2&gt;&lt;p&gt;1、安装&lt;br&gt;2、基本语法&lt;br&gt;3、项目导出及部署&lt;br&gt;4、JSP注释&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://x-nicolo.github.io/tags/java/"/>
    
      <category term="web" scheme="https://x-nicolo.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2017上半年书单</title>
    <link href="https://x-nicolo.github.io/2017/06/11/2017%E4%B8%8A%E5%8D%8A%E5%B9%B4%E4%B9%A6%E5%8D%95/"/>
    <id>https://x-nicolo.github.io/2017/06/11/2017上半年书单/</id>
    <published>2017-06-11T13:15:39.000Z</published>
    <updated>2017-06-13T06:45:51.401Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2847713-79de255ba8085d8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017上半年书单"></p>
<hr>
<p>千里万卷。</p>
<hr>
<ul>
<li>《硬派健身》</li>
<li>《人类简史》</li>
<li>《腾讯传》</li>
<li>《创京东》</li>
<li>《毛泽东传》</li>
<li>《人民的名义》</li>
<li>《我与地坛》</li>
<li>《鱼羊野史》</li>
<li>《小米口碑营销内部手册：参与感》</li>
<li>《人类群星闪耀时》</li>
<li>《嫌疑人X的献身》</li>
<li>《以色列：一个国家的诞生》</li>
<li>《以色列2：在危机中生存》</li>
<li>《半小时漫画中国史》</li>
<li>《近忧远虑》</li>
</ul>
<a id="more"></a>
<h1 id="《硬派健身》"><a href="#《硬派健身》" class="headerlink" title="《硬派健身》"></a>《硬派健身》</h1><p>最早看到斌卡是在知乎上的答题。这本书的主题的减肥篇。从理论和实际出发为读者提供相对应的对策。印象最深的是我一直做的深蹲的方法都是错的。而且我也从这里明白了一个道理：<em>管住嘴，迈开腿;七分吃，三分动。</em>这才是减重的真理！消耗大于输出才是减重唯一的标准。而且吃真的很重要，不是少吃，而是会吃。两个月瘦了快二十斤，学习的也很多。这个要说起来感觉能说一篇新文章。嗯，<em>坚持也很重要！</em>我的flag也没倒！</p>
<h1 id="《人类简史》"><a href="#《人类简史》" class="headerlink" title="《人类简史》"></a>《人类简史》</h1><p>这是本好书，值得花时间再去细读，颠覆了许多以前的观点。<br>高中物理老师说过的话，我们为什么要学物理？就是要用现有的东西去推测未来。<br>学校学习都是潜移默化。现在受力分析估计已经不会了，但是老师的这话我就记住了，还觉得越来越有道理。</p>
<h3 id="部分书摘"><a href="#部分书摘" class="headerlink" title="部分书摘"></a>部分书摘</h3><hr>
<blockquote>
<p>1.因为一旦人们发现历史能证明乐无常态而知足常乐，发现我们过去对快乐的历史认知可能都是错的，发现对快感的执着追求可能只会适得其反地导致痛苦，那么我们就有可能走向对自己的真正理解，也就可能知道自己想要的究竟是什么了。</p>
<hr>
<p>2.所以，究竟智人是怎么跨过这个门槛值，最后创造出了有数万居民的城市、有上亿人口的帝国？这里的秘密很可能就在于虚构的故事。就算是大批互不相识的人，只要同样相信某个故事，就能共同合作。</p>
<hr>
<p>3.人类和黑猩猩之间真正不同的地方就在于那些虚构的故事，它像胶水一样把千千万万的个人、家庭和群体结合在一起。这种胶水，让我们成了万物的主宰。</p>
<hr>
<p> 4.种种想让生活变得轻松的努力，反而给人带来无穷的麻烦；而且这可不是史上的最后一次。就算今天，仍然如此。有多少年轻的大学毕业生投身大企业、从事各种劳心劳力的工作，发誓要努力赚钱，好在35岁就退休，去从事他们真正有兴趣的事业？但等他们到了35岁，却发现自己背着巨额贷款，要付子女的学费，要养在高级住宅区的豪宅，每家得有两部车，而且觉得生活里不能没有高级红酒和国外的假期。他们该怎么做？他们会放下一切，回去野外采果子挖树根吗？当然不可能，而是加倍努力，继续把自己累得半死。</p>
<hr>
<p>5.人际关系和政治对立都是长期的事，无论报恩或报仇，常常都要花上好几年的时间。然而，在狩猎和采集这种自给自足的经济里，要做这种长期规划就会受到客观条件的限制。但说来也有趣，这让采集者省下了许多不必要的忧虑。毕竟，如果是那些无法影响的事，就算担心也没用。</p>
<hr>
<p>6.历史只告诉了我们极少数的人在做些什么，而其他绝大多数人的生活就是不停挑水耕田。</p>
<hr>
<p>7.支持它们的社会规范既不是人类自然的天性本能，也不是人际的交流关系，而是他们都相信着共同的虚构神话故事。</p>
<hr>
<p>8.伏尔泰就曾说：“世界上本来就没有神，但可别告诉我的仆人，免得他半夜偷偷把我宰了。”</p>
<hr>
<p>9.一如古埃及精英分子，现在大多数人一生汲汲营营，也都是想盖起某种金字塔，只不过这些金字塔在不同文化里会有不同的名字、形体和规模罢了。</p>
<hr>
<p>10.自从法国大革命之后，全球人民逐渐同意“自由”和“平等”都是基本的价值观。然而这两者根本就互相抵触！想要确保“平等”，就得限制住那些较突出的人；而要人人都能“自由”，也就必然影响所有人的平等。</p>
<hr>
<p>11.自从法国大革命之后，全球人民逐渐同意“自由”和“平等”都是基本的价值观。然而这两者根本就互相抵触！想要确保“平等”，就得限制住那些较突出的人；而要人人都能“自由”，也就必然影响所有人的平等。</p>
<hr>
<p>12.某些社会的解决方式，就是建立起集中的以物易物系统，分别从各个专业的农夫和制造商那里取得产品，再统一分配到最需要的人手上。这种社会规模最大、名声最著的就是苏联；不过最后可以说是凄惨收场。原本声称要让人人“各尽所能、各取所需”，但结果是“各尽所能的最小值，各抢所需的最大值”</p>
<hr>
<p>13.金钱正是有史以来最普遍也最有效的互信系统。</p>
<hr>
<p>14.所有人类创造的信念系统之中，只有金钱能够跨越几乎所有文化鸿沟，不会因为宗教、性别、种族、年龄或性取向而有所歧视。也多亏有了金钱制度，才让人就算互不相识、不清楚对方人品，也能携手合作。</p>
<hr>
<p>15.现代西方认为所谓公义的世界应该是由各个独立的民族国家组成，但古代中国的概念却正好相反，认为政治分裂的时代不仅动荡不安，而且公义不行。这种看法对中国的历史产生深远的影响。每次一个帝国朝代崩溃，这种政治理论主流就让各方竞逐的势力不安于各自为政，而一心追求统一。而且事实证明，最后总能统一，只是时间早晚的问题。</p>
<hr>
<p>16.我们看到有几百万虔诚的基督徒、穆斯林和犹太人居然能够相信既有全能的神，又有独立行事的魔鬼，倒也不用太过惊讶。更有甚者，无数的基督徒、穆斯林和犹太人居然还能想象善神需要人类的协助，好与魔鬼对抗，由此再推导引发了圣战和十字军东征。</p>
<hr>
<p>17.释迦牟尼认为，人遇到事情通常就会产生欲念，而欲念总是会造成不满。遇到不喜欢的事，就想躲开；遇到喜欢的事，就想维持并增加这份愉快。但正因如此，人心就永远不满、永远不安。这点在碰上不悦的时候格外明显，像是感觉疼痛的时候，只要疼痛持续，我们就一直感到不满，用尽办法想要解决。然而，就算是遇上欢乐的事，我们也从不会真正满足，而是一直担心这种欢乐终将结束或是无法再持续或增强。有些人多年来一直在寻找爱情，但等到真的找着了爱情，却还是不满足。有的开始整天担心对方可能会离开；有的又觉得自己太过屈就，应该再找更好的人。</p>
<hr>
<p>18.释迦牟尼找到一种方法可以跳出这种恶性循环。在事物带来快乐或痛苦的时候，重点是要看清事物的本质，而不是着重在它带来的感受，于是就能不再为此所困。虽然感受悲伤，但不要希望悲伤结束，于是虽然仍有悲伤，也能不再为此而困。即使仍然悲伤，也是一种丰硕的经验。虽然感受快乐，但不要希望快乐继续，于是虽然仍有快乐，也能不失去心中的平静。</p>
<hr>
<p>19.释迦牟尼将冥想落实在各种道德规范上，好让信众更能专注在实际的感受，而不会落入各种欲求和幻想之中。他要求信众不杀生、不邪淫、不偷盗，因为这些作为一定会让欲望如野火燎原，而一心追求权力、感官享受或财富。等到这些火焰彻底扑灭，原本的欲求就换成了圆满和寂静，称为涅槃（梵文的原义就是“熄灭”）。达到涅槃，也就是解脱了所有苦痛，能够无比清晰地感受身边的现实，没有什么幻想和幻象。虽然人们很有可能还是会遇到苦痛，但苦痛已经不再能影响他们。毕竟，无欲则无苦。</p>
<hr>
<p>20.我们之所以研究历史，不是为了要知道未来，而是要拓展视野，要了解现在的种种绝非“自然”，也并非无可避免。未来的可能性远超过我们的想象。</p>
<hr>
<p>21.在公元1500年，人类还被局限在地面上。虽然可以盖起高塔、爬上高山，但天空仍然是专属于飞鸟、天使和神的领域。而到了1969年7月20日，人类登陆月球。这不只是一项历史成就，更是一项演化上甚至是宇宙间的壮举。在过去40亿年演化期间，没有任何生物能够离开地球大气层，更不用谈要在月球上留下手印或足迹。<br>在地球上，微生物占了全部有机体大约99.99%，但人类要到非常晚近，才对微生物有所认识。这并不是因为微生物与我们无关，相反的是，我们每个人身上都有数十亿个单细胞生物，而且还不只是搭搭便车的关系。微生物可以说是我们最好的朋友，也是最致命的敌人。有些微生物可以帮助消化、健胃整肠，而有些则会导致疾病、造成感染。一直要到1674年，才有人第一次真正看见了微生物。当时安东·冯·列文虎克（Anton van Leeuwenhoek）自制了一台显微镜，用来观察一滴水，他看到里面有许多小生物动个不停，这让他大吃一惊。在随后的300年间，人类才开始认识了许许多多的微生物物种。时至今日，我们已经能够治疗大多数由微生物造成的致命传染病，也能够将微生物用于医疗和产业用途。像是我们可以用细菌来制造药物、生物燃料，或是杀死寄生虫。</p>
<hr>
<p>22.你觉得这些帝国就是邪恶的怪物，在全球各地四处散播死亡、压迫和歧视吗？随便把他们的罪行列出来，就足以编成一部百科全书了。你觉得这些帝国其实为属民提供了新的医药、更佳的经济环境、更多的安全吗？随便把他们的成就列出来，也足以编成另一部百科全书。正因为帝国与科学密切合作，就让它们有了如此强大的力量，能让整个世界大为改观；也是因为如此，我们很难简单断言它们究竟是善是恶。正是帝国创造了我们所认识的世界，而且，其中还包含我们用以判断世界的意识形态。</p>
<hr>
<p>23.对快乐与否的影响，家庭和社群要比金钱和健康来得重要。</p>
<hr>
</blockquote>
<h1 id="《腾讯传》"><a href="#《腾讯传》" class="headerlink" title="《腾讯传》"></a>《腾讯传》</h1><p>立志成为一位优秀码农的我当然对腾讯的发家史很感兴趣。<br>没有一种成功的是不努力的。运气真的很重要很重要很重要。<br>有很多话想说，但是还觉得应该做好自己现在的事情。<br>踏实，坚韧，高瞻远瞩。实用的道理往往最简单。</p>
<h3 id="部分书摘-1"><a href="#部分书摘-1" class="headerlink" title="部分书摘"></a>部分书摘</h3><hr>
<blockquote>
<p>1.“Pony喜欢开长会，每一个议题提出后，他都不会先表态，而是想要听到每一个人的态度和意见，所以会议往往开得很漫长。”</p>
<hr>
<p>2.此时的马化腾，还没有学会如何在公众面前表现幽默感。在接受采访时，他除了描绘腾讯的“远大前程”之外，重点介绍了上个月25日推出的QQ新版本。在这个升级版本中，第一次出现了群聊功能。<br>这个功能的灵感来自于腾讯内部的“饭友团”文化。那时候，腾讯内部存在很多“饭友团”，中午下班前大家通过邮件讨论并决定午餐如何解决，由于邮件存在延迟，且回复意见比较混乱，很难迅速达成一致意见，经常还会出现人员遗漏问题。针对这些问题，便有人提出这样一个设想：“能不能在QQ上面建立一个固定的人员列表，列表中人员可以同时参与即时讨论呢？”</p>
<hr>
<p>3.中国社会历来是一个充满了压抑感的等级社会，它既表现在宗族的内部，也体现在公共社会层面，人们在现实生活中战战兢兢，情感生活十分苍白和乏味。而虚拟社区的出现，如同一个突然出现的新世界，让压抑日久的人们可以戴着面具，实现一次不需要节制的狂欢。中国人在现实中的含蓄与在虚拟中的狂放构成了一个十分鲜明和讽刺性的反差。</p>
<hr>
<p>4.从此以后，产品经理制被确立了下来，“谁提出，谁执行”“一旦做大，独立成军”成为腾讯内部不成文的规定。这一新模式无形中造就了“赛马机制”，我们将看到，后来为腾讯带来众多“意外”的创新，如QQ空间、QQ游戏乃至微信，都不是顶层规划的结果，而是来自基层的业务单元的独立作业。工程师文化与产品经理制在内在的驱动力上有天然的冲突性，然而，却在腾讯实现了无缝融合。</p>
<hr>
<p>5.在一次飞行旅途中，筋疲力尽的刘炽平闭目斜躺在座位上，邻座的陈一丹突然把他拍醒，提出一个邀请：“喂，你愿意加入腾讯吗？”在上市筹备过程中，刘炽平的聪明、坚毅和快速学习能力得到了腾讯创始人团队的一致认可，“土鳖+洋龟”结合产生的化学作用更是值得期待。</p>
<hr>
<p>6.在2004年6月的那场记者见面会上，丁磊还带来一个爆炸性的武器，他宣称网易已研制成功一款类似于Skype的即时语音沟通工具，“我们真正的突破点是在任何环境下均可通信，语音质量达到了GSM的质量，下一版本我们的语音通信质量会超过电话的通信质量。网易在实验网中已完全通过测试，跟传统电话互通在技术上完全没问题。而且现在这个版本的泡泡已有这样的功能，软件已装在里面了，只要政策允许就可推出”。这是一个值得被记录下来的事实，它表明，中国的互联网企业早在2004年就完成了即时语音通信上的重大突破，若非遭到国有的电信运营商的蛮横阻挠，2011年的微信将早出生7年，而且这个机会应该属于丁磊的网易。</p>
<hr>
<p>7.紧盯市场动态，以最快的方式复制成功者模式，利用QQ用户优势进行后发超越。</p>
<hr>
<p>8.“后发是最稳妥的方式”</p>
<hr>
<p>9.“高级别的文明体从来都是在异常困难而非异常优越的环境中降生的。挑战越大，刺激越强”。</p>
<hr>
<p>10.“Don’t make me think！”</p>
<hr>
<p>11.创新亦非来自于实验室，而是市场的不断变换的需求。</p>
<hr>
<p>12.“成功的秘诀，在于把自己的脚放入他人的鞋子里，进而用他人的角度来考虑事物，服务就是这样的精神，站在客人的立场去看整个世界。”</p>
<hr>
<p>13.任何产品都有核心功能，其宗旨就是能帮助到用户，解决用户某一方面的需求，如节省时间、解决问题、提升效率等。核心能力要做到极致。要多想如何通过技术实现差异化，让人家做不到，或通过一年半载才能追上。</p>
<hr>
<p>14.我们希望的产品经理是非常资深的，最好是由做过前端、后端开发的技术研发人员晋升而来。</p>
<hr>
<p>15.过去，我们总在思考什么是对的。但是现在，我们要更多地想一想什么是能被认同的。</p>
<hr>
<p>16.“挑战者必须找到不同于领先者的新竞争方式以取得成功”</p>
<hr>
<p>17.张小龙指尖夹着KENT牌香烟，在自己的腾讯微博上打下了一行烟雾缭绕的“心情”：我对iPhone 5的唯一期待是，像iPad（3G）一样，不支持电话功能。这样，我少了电话费，但你可以用kik跟我短信，用Google Voice跟我通话，用Facetime跟我视频。</p>
<hr>
<p>18.“如果你说我是错的，你要证明你是对的。”</p>
<hr>
</blockquote>
<h1 id="《创京东》"><a href="#《创京东》" class="headerlink" title="《创京东》"></a>《创京东》</h1><p>如果说BAT都有种种光环，那么京东绝对算上是逆袭的了。<br>志之所趋，无远弗届，穷山距海，不能限也。</p>
<h3 id="部分书摘-2"><a href="#部分书摘-2" class="headerlink" title="部分书摘"></a>部分书摘</h3><hr>
<blockquote>
<p>1.过去京东的唯一推广方式就是给用户打折，那是赚今天的钱；打广告则是赚明天的钱。</p>
<hr>
<p>2.京东的策略就是，我是老大，我有钱，你没钱，咱们就耗着，耗到市场不好的时候，你们没钱就得死。</p>
<hr>
<p>3.在京东董事会，要么你说服我，要么我说服你，如果谁也不能说服谁，就投票。9个席位，刘强东代表5席。</p>
<hr>
<p>4.身在历史潮流中，不允许犹豫，快速决策比决策正确与否更重要。</p>
<hr>
<p>5.人的本性是向善的，总愿意往好的方向发展，就看企业给不给他这样的土壤。如果给他良好的平台，人会有积极、正向的行动；如果平台糟糕，做出来的绩效不被认可，就有劣币驱逐良币的风险。</p>
<hr>
<p>6.电商要颠覆渠道格局，至少要占30％。最后一公里的配售解决了，局就破了。</p>
<hr>
<p>7.中国教育让刘强东从小养成寻找唯一答案的思维方式：黑与白、好与坏、对与错。</p>
<hr>
<p>8.他原来是要做一件事，先找合适的人来做，实在找不到就自己做；现在是先想找什么样的人，这些人会思考什么是对的事，如何把它做好。</p>
<hr>
<p>9.腾讯从2004年开始做拍拍网，在时间上没有落后阿里巴巴多少，但两者的决心是天壤之别。那时候，淘宝是阿里巴巴的全部未来，阿里巴巴会调动最好最多的资源；而腾讯只是觉得是个机会，做好了很好，做不好也不影响大局。</p>
<hr>
<p>10.总结电商未来三大趋势或者三大利润增长点，无非三个，生鲜、跨境电商、O2O。</p>
<hr>
</blockquote>
<h1 id="《毛泽东传》"><a href="#《毛泽东传》" class="headerlink" title="《毛泽东传》"></a>《毛泽东传》</h1><p>一代伟人，有功有过。</p>
<p>对于毛主席我无法评价，但是伟大是必然的。虽然是一本由外国人写的传记。但是作者的思路和翻译的文笔都堪称经典。<br>王侯将相宁有种乎？一个农民的儿子成为几亿人的神，最终又回到了人的本位。毛主席惊世骇俗却也无法超发脱俗。里面很多简单叙述仔细琢磨，都是经过了深刻的思考才能表达的人生哲学。　　</p>
<p>其实还是有一些疑问的，人真的只有断了七情六欲才能成大事吗？　　<br>发现书中的一个细节。他的第一任妻子杨开慧带着孩子在老家，在没有离婚的情况下他在井冈山娶了贺子珍，后来贺子珍精神出问题被送去治疗，又在没有离婚的情况在延安下娶了江青。他的孩子们也没有得到童年应有的父爱。这究竟是怎么的一种性格。</p>
<h3 id="部分书摘-3"><a href="#部分书摘-3" class="headerlink" title="部分书摘"></a>部分书摘</h3><hr>
<blockquote>
<p>1.“记下随时产生的想法，自由地表达我们想到的东西，这样可以帮助我们保持平衡。”</p>
<hr>
<p>2.“世界上有两种人，”有一天毛泽东对萧三说，“一种人善于做具体事情，一种人善于做组织工作。前者要多于后者。但是，每个人都有他的长处。”</p>
<hr>
<p>3.毛泽东在一次集会上发表演说，主题是“使用国货，抵制日货”，完全不顾中国产品不能满足人民需要这一事实。他组织了女生小队（从一开始他就把妇女纳入了湖南学生联合会的核心组织之中）去检查长沙的商店，声色俱厉地警告店主们毁掉日本的进口货。</p>
<hr>
<p>4.他组织工会，发动了十多次重要罢工。他还不时地悄悄成立新的党小组。工作很有成效，两年之内在湖南成立了拥有5万工人的20个工会。经过仔细和谨慎挑选的湖南中共基层党员，从1921年年中的10名，猛增到一年后的123名。每当一个新工会建立起来，毛泽东就设法安插一个中共干部做它的书记。</p>
<hr>
<p>5.在1946年，国民党占有中国南方的全部以及贫瘠的、人烟稀少的遥远西部。共产党在北方势力强大。毛泽东的部队在人力上是蒋介石的三分之一，在武器上是五分之一。<br><strong>注：这里想到高晓松讲到的一个历史规律：历史的大概率事件，都是某个政权从北方开始统一全国。</strong>　　</p>
<hr>
</blockquote>
<h1 id="《人民的名义》"><a href="#《人民的名义》" class="headerlink" title="《人民的名义》"></a>《人民的名义》</h1><p>被改编的电视剧大火，而书里写的却更加深刻。<br>想到上一本书里毛主席晚年的思想：这不是一个物质的世界，唯物并不显得那么真理，而是一个人与人关系的世界。</p>
<h3 id="部分书摘-4"><a href="#部分书摘-4" class="headerlink" title="部分书摘"></a>部分书摘</h3><hr>
<blockquote>
<p>1.人在倒霉时，才懂得友谊的可贵。</p>
<hr>
<p>2.能力之外的一切资本都等于零！</p>
<hr>
<p>3.”油气集团是国家的，全民所有制，全民所有就是全民没有！”</p>
<hr>
<p>4.世事开始变得多少有些陌生，也许是人与人的关系改变了。</p>
<hr>
<p>5.这位省委书记难啊，领导着一个六千万人的大省，相当于欧洲一个大国，他要不疲惫而是活得轻松愉快，反倒让人奇怪了。</p>
<hr>
<p>6.好在我们党已经醒了，现在收拾世道人心还来得及.</p>
<hr>
</blockquote>
<h1 id="《我与地坛》"><a href="#《我与地坛》" class="headerlink" title="《我与地坛》"></a>《我与地坛》</h1><p>我已不在地坛，地坛在我。</p>
<p>初始史铁生在初中。这次才算是全部读完。整本书的思辨能力真的是太强大了。<br>描写他与母亲的种种画面，真的是刺痛我心了。<br>被身残的悲痛笼罩而忽略母亲的“愧疚”。必须活下去的“无奈”，天地间孓然苍凉的“孤寂”。</p>
<h3 id="部分书摘-5"><a href="#部分书摘-5" class="headerlink" title="部分书摘"></a>部分书摘</h3><hr>
<blockquote>
<p>1.要是有些事我没说，地坛，你别以为是我忘了，我什么也没忘，但是有些事只适合收藏。不能说，也不能想，却又不能忘。它们不能变成语言，它们无法变成语言，一旦变成语言就不再是它们了。它们是一片朦胧的温馨与寂寥，是一片成熟的希望与绝望，它们的领地只有两处：心与坟墓。比如说邮票，有些是用于寄信的，有些仅仅是为了收藏。</p>
<hr>
<p>2.一个人，出生了，这就不再是一个可以辩论的问题，而只是上帝交给他的一个事实；上帝在交给我们这件事实的时候，已经顺便保证了它的结果，所以死是一件不必急于求成的事，死是一个必然会降临的节日。这样想过之后我安心多了，眼前的一切不再那么可怕。比如你起早熬夜准备考试的时候，忽然想起有一个长长的假期在前面等待你，你会不会觉得轻松一点儿？并且庆幸并且感激这样的安排？<br><strong>注：对未发生的事情毋需忧虑，因为还有可以努力的机会;对一定会发生的事情也毋需忧虑，因为它迟早要来。</strong></p>
<hr>
<p>３.剩下的就是怎样活的问题了。这却不是在某一个瞬间就能完全想透的，不是能够一次性解决的事，怕是活多久就要想它多久了，就像是伴你终生的魔鬼或恋人。</p>
<hr>
<p>4.那些年我们俩常一起在这园子里待到天黑，开怀痛骂，骂完沉默着回家，分手时再互相叮嘱：先别去死，再试着活一活看。</p>
<hr>
<p>5.其实总共只有三个问题交替着来骚扰我，来陪伴我。第一个是要不要去死，第二个是为什么活，第三个，我干吗要写作。</p>
<hr>
</blockquote>
<h1 id="《鱼羊野史》"><a href="#《鱼羊野史》" class="headerlink" title="《鱼羊野史》"></a>《鱼羊野史》</h1><p>《鱼羊野史》这本书是我最近一段时间看的，作者高晓松，书大概有1400多页，类似于每天一个小故事，适合睡前读一读。从《晓说》到《晓松奇谈》再到优酷新开的《晓说》，以及这本书，都能展示出高晓松极高的造诣。关于他的家庭，折射出近代的一些变迁。从脱口秀到这本书，矮大紧总是能以一种新的角度去看一些事情，反而觉得很有趣。关于历史，关于人类以及这个世界上其他有趣的事情。印象最深的是《晓松奇谈》里的《胜利下的阴影》，另一个角度去看二战和战争，战争和胜利都很触目惊心。这本书历史和艺术涉猎都非常之广泛和有趣，但是某些方面确实也有偏差。总之，还是要接着和矮大紧老师学习的。</p>
<h3 id="部分书摘-6"><a href="#部分书摘-6" class="headerlink" title="部分书摘"></a>部分书摘</h3><hr>
<blockquote>
<p>1.燕大的校训是“因自由，得真理，以服务”。大学不该是一个职业培训班，不是为了毕业找一工作，大学是让国家相信真理的最后阵地。</p>
<hr>
<p>2.当时北京要拆城墙，由北京市副市长、原清华历史学教授吴晗先生来主持，谦谦君子梁先生听到这个消息默默哭泣，而林先生指着吴晗破口大骂：“你们拆去的是真古董！你们迟早会后悔的，到时候你们要盖的是假古董。而且你是历史学教授，你知道什么是历史，这么多年的历史毁于一旦！”</p>
<hr>
<p>3.“老兵不死，只是慢慢消失。”</p>
<hr>
<p>4.美国人是全世界最适应市场经济的人民，很少有这种壁垒观念，也没说IBM被中国并购就不买这个产品了。</p>
<hr>
<p>5.其实学校就是这样，读书的时候，你并没有觉得这个学校有多么美好，但是你来到社会上，尤其到了四十岁，你才慢慢觉得学校带给你的东西真的很多</p>
<hr>
<p>6.泰国在二战中也加入了轴心国，由于它既不骁勇也不善战，虽然加入了轴心国，但也没作什么恶，没犯下什么反人类的罪行，所以大家也没把它怎么样。二战之后它又恢复了“暹罗”这个名字，但是到了1949年的这一天，民族主义战争爆发了，又改名叫“泰国”。</p>
<hr>
<p>7.历朝历代统一基本上都是北方统一南方，秦，晋，隋，元，清，当然还有我朝。明是唯一一个从南打到北，统一中原的王朝，不过有明一朝一直受到北元的骚扰，也可以说，并没有完成全国统一。所以，王师北定中原基本上是不太可能出现的。</p>
<hr>
<p>8.小说的最后还描写雨连续下了四个月，住在树下的人身上都长了青苔。这种描述让你觉得整个人生、整个生活不但是孤独的，而且是远离人群的。</p>
<hr>
<p>9.艺术和科学是人类最重要的两条平行线，一直是你追我赶地在向前发展。今天的这个时代是科技远远领先的时代，而艺术经常会在科学遇到阻碍的时候有较快发展，比如在战争等对人类造成重大伤害之后，科技的发展会暂时停下来，而艺术的发展就会追上去。</p>
<hr>
<p>10.经常也突然就没掉了活着的意愿和意思。<br>那些接近星空的人是会明了着选择结束生命，完成自己亲手处理的意愿吧。于他们自己来说，并非灰色。<br><strong>注：持续保持输出本身就是一种消耗。</strong></p>
<hr>
<p>11.在近代化的进程中，原本我们可以启动得更早，却都落在日本的后面，这就是酿成另一场更大的悲剧——甲午战争的惨败的一大原因。人生如大国决策，关键时刻，面临多项选择。或照本宣科，或行出自己的车辙。若骄奢，不尽早褪去青涩，便必落马于曲折。</p>
<hr>
<p>12.当时红星签了一个叫许巍的歌手，之前谁都没听说过这个人，只知道他来自西安。我们那时对西安有一种特别美好的想象，因为大家知道西安来的张楚、西安来的郑钧，现在西安又来了一个人，所以都特别感兴趣，于是好多人就跑到“旅游棚”里去听他唱歌。</p>
<hr>
<p>13.1976年是中国的多事之秋，我们的毛主席、周总理、朱总司令都是在那一年去世的，再加上唐山大地震，这应该是新中国历史上最惨痛的一年吧。</p>
</blockquote>
<hr>
<hr>
<hr>
<hr>
<p>就这些吧。读书是闲暇时间的乐趣，是消耗时间的“毒品”。<br>看到知乎上一个问题，”读书的意义是什么？”下面的高票回答，觉得很棒，分享引用。</p>
<blockquote>
<p>杨绛先生的父亲有一次问杨绛：“阿季，三天不让你看书，你怎么样?”<br>她说：“不好过。”“一星期不让你看书呢?”<br>她说：“一星期都白活了。”<br>父亲笑了，说：“我也这样。”<br>很多人都爱追问读书的意义、读书的用处，其实真正手边不离书的人，很少这样问。因为读书对于真正爱书的人来讲，就如同吃饭睡觉，必须却也凡常，没什么特别需要追问的意义和用处。读书就读书，可以体验乐趣，但不必去强调意义。不读书就不读书，一点儿也不丢人，人各有追求、各有所爱，很正常，但是不必去强调你是为什么才不读书（累、没时间、没精力、家里地方小没地儿摆书…）也更不要去否定读书这件事本身。真正离不开书的人，书就是很平常的生活必需，没什么特别的意义，就像人处在什么境况下都会去吃饭睡觉，饭上餐桌，你落座，拿起筷子之前大概不会去特别地思考一下“我为什么吃饭？吃完了还要排泄，那么吃饭到底有用没用？吃饭的真正意义是什么？我吃了这一口我能得到什么，下一口又能收获什么？” 读书也是这样，如果必须问一个意义，那么于爱她的人来说，她最重要的意义或许就是“陪伴”以及“丰富”，手边有书，就永远不孤独、不乏味，书里有比眼睛里更生动的世界。世间许多事从来都如此，当我们执着追寻它的意义的时候，就已经失去了它所能带给我们的最珍贵的东西。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2847713-79de255ba8085d8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2017上半年书单&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;千里万卷。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;《硬派健身》&lt;/li&gt;
&lt;li&gt;《人类简史》&lt;/li&gt;
&lt;li&gt;《腾讯传》&lt;/li&gt;
&lt;li&gt;《创京东》&lt;/li&gt;
&lt;li&gt;《毛泽东传》&lt;/li&gt;
&lt;li&gt;《人民的名义》&lt;/li&gt;
&lt;li&gt;《我与地坛》&lt;/li&gt;
&lt;li&gt;《鱼羊野史》&lt;/li&gt;
&lt;li&gt;《小米口碑营销内部手册：参与感》&lt;/li&gt;
&lt;li&gt;《人类群星闪耀时》&lt;/li&gt;
&lt;li&gt;《嫌疑人X的献身》&lt;/li&gt;
&lt;li&gt;《以色列：一个国家的诞生》&lt;/li&gt;
&lt;li&gt;《以色列2：在危机中生存》&lt;/li&gt;
&lt;li&gt;《半小时漫画中国史》&lt;/li&gt;
&lt;li&gt;《近忧远虑》&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://x-nicolo.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="读书" scheme="https://x-nicolo.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构笔记（一）</title>
    <link href="https://x-nicolo.github.io/2017/06/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://x-nicolo.github.io/2017/06/08/数据结构/</id>
    <published>2017-06-08T01:17:54.000Z</published>
    <updated>2017-06-08T07:33:16.774Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="第1章-数据结构绪论"><a href="#第1章-数据结构绪论" class="headerlink" title="第1章 数据结构绪论"></a>第1章 数据结构绪论</h2><h2 id="第2章-算法"><a href="#第2章-算法" class="headerlink" title="第2章 算法"></a>第2章 算法</h2><h2 id="第3章-线性表"><a href="#第3章-线性表" class="headerlink" title="第3章 线性表"></a>第3章 线性表</h2><hr>
<a id="more"></a>
<h2 id="第1章-数据结构绪论-1"><a href="#第1章-数据结构绪论-1" class="headerlink" title="第1章 数据结构绪论"></a>第1章 数据结构绪论</h2><ul>
<li>程序设计 = 数据结构 + 算法</li>
</ul>
<h3 id="逻辑结构与物理结构"><a href="#逻辑结构与物理结构" class="headerlink" title="逻辑结构与物理结构"></a>逻辑结构与物理结构</h3><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><ol>
<li>集合结构</li>
<li>线性结构</li>
<li>树形结构</li>
<li>图形结构</li>
</ol>
<h4 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h4><ul>
<li>物理结构：是指数据的逻辑结构在计算机中的存储形式。</li>
</ul>
<ol>
<li>顺序存储结构：把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。</li>
<li>链式存储结构：把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</li>
</ol>
<h2 id="第2章-算法-1"><a href="#第2章-算法-1" class="headerlink" title="第2章 算法"></a>第2章 算法</h2><p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</p>
<h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><ol>
<li>输入输出：有零个或多个输入，至少有一个或多个输出。</li>
<li>有穷性</li>
<li>确定性</li>
<li>可行性</li>
</ol>
<h3 id="算法设计的要求"><a href="#算法设计的要求" class="headerlink" title="算法设计的要求"></a>算法设计的要求</h3><ol>
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li>时间效率高和存储量低</li>
</ol>
<h3 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h3><p>定义：在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量级。算法的时间复杂度，也就是算法的时间度量，记作：T(n) = O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐进时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。<br>这样用大写O()来体现算法时间复杂度的记法，称之为大O记法。</p>
<h3 id="推导大O阶"><a href="#推导大O阶" class="headerlink" title="推导大O阶"></a>推导大O阶</h3><ol>
<li>用常数1取代运行时间中的所有加法常数</li>
<li>在修改后的运行次数函数中，只保留最高阶项。</li>
<li>如果最高阶项存在且不是1，则去除与这个项相乘的常数。<br>得到的结果就是大O阶。</li>
</ol>
<p>常用的时间复杂度所消耗的时间从小到大依次是：<br><em>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n(2)) &lt; O(n(3)) &lt; O(2(2)) &lt; O(n!) &lt; O(n(n))</em></p>
<h3 id="算法的空间复杂度"><a href="#算法的空间复杂度" class="headerlink" title="算法的空间复杂度"></a>算法的空间复杂度</h3><p>算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n) = O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。</p>
<h2 id="第3章-线性表-1"><a href="#第3章-线性表-1" class="headerlink" title="第3章 线性表"></a>第3章 线性表</h2><p>线性表(List)：零个或多个数据元素的有限序列。</p>
<p>a(i-1)是a(i)的直接前驱元素，a(i+1)是a(i)的直接后继元素。</p>
<h3 id="线性表的抽象数据类型定义"><a href="#线性表的抽象数据类型定义" class="headerlink" title="线性表的抽象数据类型定义"></a>线性表的抽象数据类型定义</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ADT</span> 线性表（<span class="selector-tag">List</span>）</div><div class="line"><span class="selector-tag">Data</span></div><div class="line">    线性表的数据对象集合为&#123;<span class="selector-tag">a1</span>,<span class="selector-tag">a2</span>,...,<span class="selector-tag">an</span>&#125;,每个元素的类型均为<span class="selector-tag">DataType</span>。其中，除第一个元素<span class="selector-tag">a1</span>外，每一个元素有且只有一个直接前驱元素，除了最后一个元素<span class="selector-tag">an</span>外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。</div><div class="line"><span class="selector-tag">Operation</span></div><div class="line">    <span class="selector-tag">InitList</span>(*L):初始化操作，建立一个空的线性表<span class="selector-tag">L</span>。</div><div class="line"></div><div class="line">    <span class="selector-tag">ListEmpty</span>(L):若线性表为空，返回<span class="selector-tag">true</span>，否则返回<span class="selector-tag">false</span>。</div><div class="line"></div><div class="line">    <span class="selector-tag">ClearList</span>(*L):将线性表清空。</div><div class="line"></div><div class="line">    <span class="selector-tag">GetElem</span>(L,i,*e):将线性表<span class="selector-tag">L</span>中的第<span class="selector-tag">i</span>个位置元素返回给<span class="selector-tag">e</span>。</div><div class="line"></div><div class="line">    <span class="selector-tag">LocaEleme</span>(L,i,*e):将线性表<span class="selector-tag">L</span>中查找与定位值<span class="selector-tag">e</span>相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回<span class="selector-tag">0</span>表示失败。</div><div class="line"></div><div class="line">    <span class="selector-tag">ListInsert</span>(*L,i,e):在线性表<span class="selector-tag">L</span>中的第<span class="selector-tag">i</span>个位置插入新元素<span class="selector-tag">e</span>。</div><div class="line"></div><div class="line">    <span class="selector-tag">ListDelete</span>(*L,i,e):在线性表<span class="selector-tag">L</span>中的第<span class="selector-tag">i</span>个位置元素，并用<span class="selector-tag">e</span>返回其值。</div><div class="line">    <span class="selector-tag">ListLength</span>(L):返回线性表<span class="selector-tag">L</span>的元素个数。</div><div class="line"><span class="selector-tag">endADT</span></div></pre></td></tr></table></figure>
<h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3><ul>
<li><p>顺序存储定义：指的是用一段地址连续的存储单元依次存储线性表的数据元素。</p>
</li>
<li><p>顺序存储方式：一维数组来实现顺序存储结构。</p>
</li>
</ul>
<p>线性表的顺序存储的结构代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20 <span class="comment">/*存储空间初始分配量*/</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">/*ElemType类型根据实际情况而定，这里假设为int*/</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    ElemType data[MAXSIZE];<span class="comment">/*数组存储数据元素，最大值为MAXSIZE*/</span></div><div class="line">    <span class="keyword">int</span> length;<span class="comment">/*线性表当前长度*/</span></div><div class="line">&#125;SQList;</div></pre></td></tr></table></figure></p>
<p>顺序存储结构需要三个属性：</p>
<ul>
<li>存储空间的起始位置：数组data,它的存储位置就是存储空间的存储位置。</li>
<li>线性表的最大存储容量:数组长度MaxSize。</li>
<li>线性表的当前长度：Length。</li>
</ul>
<p>用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入好人删除操作，因此分配的数组空间要大于等于当前线性表的长度。</p>
<p>存储器中的每个存储元素都有自己的编号，这个编号成为地址。</p>
<h3 id="顺序存储结构的插入与删除"><a href="#顺序存储结构的插入与删除" class="headerlink" title="顺序存储结构的插入与删除"></a>顺序存储结构的插入与删除</h3><ul>
<li>获得元素操作<br>实现GetElem操作，将线性表L中的第i个位置元素值返回。就程序而言，只要i的数值在数组下标范围内，就是把数组第i-1下标的值返回即可。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</div><div class="line">Status是函数的类型，其值是函数结果状态代码，如OK等</div><div class="line">初始条件：顺序线性表L已存在，<span class="number">1</span>&lt;= i &lt;= ListLength(L)</div><div class="line">操作结果：用e返回L中第i个数据元素的值</div><div class="line">Status GetElem (SqList L, <span class="keyword">int</span> i, ElemType *e)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(L.length==<span class="number">0</span> || i&gt;L.length)</div><div class="line">    <span class="keyword">return</span> ERROR;</div><div class="line">    *e=L.data[i<span class="number">-1</span>];</div><div class="line">    <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>插入算法的思路：</p>
<ul>
<li>如果插入位置不合理，抛出异常；</li>
<li>如果线性表长度大于等于数组长度，则抛出异常或动态增加容量；</li>
<li>从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；</li>
<li>将要插入元素填入位置i处；</li>
<li>表长加1；<br>代码实现：</li>
</ul>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">初始条件：顺序线性表Ｌ已存在，１&lt;= i &lt;= ListLength(L)</div><div class="line">操作结果：在L中第i个位置之前插入新的数据元素e,L的长度加<span class="number">1</span></div><div class="line"></div><div class="line">Status ListInsert(SqLsit *L, <span class="keyword">int</span> i,ElemType e)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> k;</div><div class="line">    <span class="keyword">if</span> (L-&gt;length == MAXSIZE)<span class="comment">/*顺序线性表已经满*/</span></div><div class="line">        <span class="keyword">return</span> ERROR;</div><div class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L-&gt;length+<span class="number">1</span>)<span class="comment">/*当i不在范围内时*/</span></div><div class="line">        <span class="keyword">return</span> ERROR;</div><div class="line">    <span class="keyword">if</span>(i&lt;=L-&gt;length)<span class="comment">/*若插入数据位置不在表尾*/</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(k=L-&gt;length<span class="number">-1</span>;k&gt;=i<span class="number">-1</span>;k--)<span class="comment">/*将要插入位置后数据元素向后移动一位*/</span></div><div class="line">            L-&gt;data[k+<span class="number">1</span>] = L-&gt;data[k];</div><div class="line">    &#125;</div><div class="line">    L-&gt;data[i<span class="number">-1</span>] = e;<span class="comment">/*将新元素插入*/</span></div><div class="line">    L-length++;</div><div class="line">    <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>算法思路：</p>
<ul>
<li>如果删除位置不合理，抛出异常;</li>
<li>取出删除元素;</li>
<li>从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置;</li>
<li>表长减1.</li>
</ul>
<h4 id="线性表顺序存储结构的优缺点"><a href="#线性表顺序存储结构的优缺点" class="headerlink" title="线性表顺序存储结构的优缺点　　"></a>线性表顺序存储结构的优缺点　　</h4><p><em>优点</em></p>
<ul>
<li>无须为表示表中元素之间的逻辑关系而增加额外的存储空间</li>
<li>可以快速的存取表中任一位置元素</li>
</ul>
<p><em>缺点</em></p>
<ul>
<li>插入和删除操作需要移动大量元素</li>
<li>当线性表长度变化较大时，难以确定存储空间的容量</li>
<li>造成存储空间的”碎片”</li>
</ul>
<h3 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h3><p>为了表示每个数据元素ai与其直接后继数据元素ai+1之间的逻辑关系，对数据元素ai来说，除了存储其本身的信息之外，还需存储一个指示其直接后继的信息（即直接后继的存储位置）。我们把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称为指针或链。<br>数据域 + 指针域 = 结点</p>
<p>链表中第一个结点的存储位置叫做头指针，最后一个结点指针为“空”，用NULL或^表示。</p>
<h4 id="头指针与头结点的异同"><a href="#头指针与头结点的异同" class="headerlink" title="头指针与头结点的异同"></a>头指针与头结点的异同</h4><h5 id="头指针"><a href="#头指针" class="headerlink" title="头指针"></a>头指针</h5><ul>
<li>头指针是指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针</li>
<li>头指针具有标示作用，所以常用头指针冠以链表的名字</li>
<li>无论链表是否为空，头指针均不为空。头指针是链表的必要元素。</li>
</ul>
<h5 id="头结点"><a href="#头结点" class="headerlink" title="头结点"></a>头结点</h5><ul>
<li>头结点是为了操作的统一和方便而设立的，放在第一元素的结点之前，其数据域一般无意义（也可存放链表的长度）</li>
<li>有了头结点，对在第一元素结点前插入结点和删除第一结点，其操作与其他结点的操作系统就统一了</li>
<li>头结点不一定是链表必须要素</li>
</ul>
<h3 id="单链表的读取"><a href="#单链表的读取" class="headerlink" title="单链表的读取"></a>单链表的读取</h3><p><em>获取链表第i个数据的算法思路</em></p>
<ol>
<li>声明一个结点p指向链表第一个结点，初始化j从1开始；</li>
<li>当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；</li>
<li>若到链表末尾p为空，则说明第i个元素不存在；</li>
<li>否则查找成功，返回结点p的数据。</li>
</ol>
<h3 id="单链表的插入与删除"><a href="#单链表的插入与删除" class="headerlink" title="单链表的插入与删除"></a>单链表的插入与删除</h3><p><em>单链表第i个数据插入结点的算法思路</em></p>
<ol>
<li>声明一节点p指向链表第一个结点，初始化j从1开始；</li>
<li>当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；</li>
<li>若到链表末尾p为空，则说明第i个元素不存在；</li>
<li>否则查找成功，在系统中生成一个空结点s；</li>
<li>将数据元素e赋值给s-&gt;data；</li>
<li>单链接的插入标准语句s -&gt; next = p -&gt; next; p -&gt;next = s;</li>
<li>返回成功。</li>
</ol>
<p><em>单链表第i个数据删除结点的算法思路</em></p>
<ol>
<li>声明一节点p指向链表第一个结点，初始化j从1开始；</li>
<li>当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1；</li>
<li>若到链表末尾p为空，则说明第i个元素不存在；</li>
<li>否则查找成功，将欲删除的结点p-&gt;next赋值给q;</li>
<li>单链表的删除标准语句p-&gt;next = q-&gt;next；</li>
<li>将q结点中的数据赋值给e，作为返回；</li>
<li>释放q结点；</li>
<li>返回成功。</li>
</ol>
<p><em>对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显</em></p>
<h3 id="单链表的整表创建"><a href="#单链表的整表创建" class="headerlink" title="单链表的整表创建"></a>单链表的整表创建</h3><p><em>单链表整表创建的算法思路:</em></p>
<ol>
<li>声明一结点p和计数器变量i；</li>
<li>初始化一空链表L;</li>
<li>让L的头结点的指针指向NULL，即建立一个带头结点的单链表；</li>
<li>循环<ul>
<li>生成一新结点赋值给p；</li>
<li>随机生成一数字赋值给p的数据域p-&gt;datd;</li>
<li>将p插入到头结点与前一新结点之间。</li>
</ul>
</li>
</ol>
<p>###　单链表的整表删除</p>
<p><em>单链表整表删除的算法思路如下：</em></p>
<ol>
<li>声明一结点p和q；</li>
<li>将第一个结点赋值给p；</li>
<li>循环<ul>
<li>将下一结点赋值给q；</li>
<li>释放p;</li>
<li>将q赋值给p。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;第1章-数据结构绪论&quot;&gt;&lt;a href=&quot;#第1章-数据结构绪论&quot; class=&quot;headerlink&quot; title=&quot;第1章 数据结构绪论&quot;&gt;&lt;/a&gt;第1章 数据结构绪论&lt;/h2&gt;&lt;h2 id=&quot;第2章-算法&quot;&gt;&lt;a href=&quot;#第2章-算法&quot; class=&quot;headerlink&quot; title=&quot;第2章 算法&quot;&gt;&lt;/a&gt;第2章 算法&lt;/h2&gt;&lt;h2 id=&quot;第3章-线性表&quot;&gt;&lt;a href=&quot;#第3章-线性表&quot; class=&quot;headerlink&quot; title=&quot;第3章 线性表&quot;&gt;&lt;/a&gt;第3章 线性表&lt;/h2&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="数据结构" scheme="https://x-nicolo.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【更正】Java调用Python</title>
    <link href="https://x-nicolo.github.io/2017/06/05/%E3%80%90%E6%9B%B4%E6%AD%A3%E3%80%91Java%E8%B0%83%E7%94%A8Python/"/>
    <id>https://x-nicolo.github.io/2017/06/05/【更正】Java调用Python/</id>
    <published>2017-06-05T09:21:25.000Z</published>
    <updated>2017-06-05T09:36:47.466Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><a href="https://x-nicolo.github.io/2017/02/28/Java%E8%B0%83%E7%94%A8Python/">错误一</a><br><a href="https://x-nicolo.github.io/2017/03/14/Java%E8%B0%83%E7%94%A8Python%E7%9A%84%E9%94%99%E8%AF%AF-1/">错误二</a><br>之前两篇博客都讨论过这个问题，现在才算是弄清楚了。　　<br>这个反转真的是。。。够了。。。　　<br>还需要学习啊。</p>
<hr>
<a id="more"></a>
<h1 id="JAVA-to-Python"><a href="#JAVA-to-Python" class="headerlink" title="JAVA to Python"></a>JAVA to Python</h1><h2 id="关于Java如何调用Python的问题"><a href="#关于Java如何调用Python的问题" class="headerlink" title="关于Java如何调用Python的问题"></a>关于Java如何调用Python的问题</h2><h3 id="方法一：Java自带函数gettime-runtime-exe"><a href="#方法一：Java自带函数gettime-runtime-exe" class="headerlink" title="方法一：Java自带函数gettime.runtime.exe()"></a>方法一：Java自带函数gettime.runtime.exe()</h3><p>功能：模拟cmd命令行。<br>例如：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">String s</span> = <span class="string">"python C:/Python27/py/studentInf/all.py"</span> + <span class="string">" "</span> + stuId + <span class="string">" "</span> + stuPassword + <span class="string">" "</span> + userId + <span class="string">" "</span> + schoolId;</div><div class="line"><span class="attribute">Process process</span> = Runtime.getRuntime().exec(s);</div></pre></td></tr></table></figure></p>
<p>Python接收参数:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">sys</span></div><div class="line"><span class="selector-tag">xs</span><span class="selector-class">.login</span>(<span class="selector-tag">sys</span><span class="selector-class">.argv</span><span class="selector-attr">[1]</span>, <span class="selector-tag">sys</span><span class="selector-class">.argv</span><span class="selector-attr">[2]</span>)</div></pre></td></tr></table></figure></p>
<h3 id="方法二：利用jython-jar"><a href="#方法二：利用jython-jar" class="headerlink" title="方法二：利用jython.jar"></a>方法二：利用jython.jar</h3><p>该方法可以解决传递形参的问题。也可以执行Python程序。<br>遇到的问题：需要确定好jython的路径问题和其他设置的路径问题。</p>
<h4 id="注意：该方法只适用Python2。"><a href="#注意：该方法只适用Python2。" class="headerlink" title="注意：该方法只适用Python2。"></a>注意：该方法只适用Python2。</h4>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://x-nicolo.github.io/2017/02/28/Java%E8%B0%83%E7%94%A8Python/&quot;&gt;错误一&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://x-nicolo.github.io/2017/03/14/Java%E8%B0%83%E7%94%A8Python%E7%9A%84%E9%94%99%E8%AF%AF-1/&quot;&gt;错误二&lt;/a&gt;&lt;br&gt;之前两篇博客都讨论过这个问题，现在才算是弄清楚了。　　&lt;br&gt;这个反转真的是。。。够了。。。　　&lt;br&gt;还需要学习啊。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://x-nicolo.github.io/tags/java/"/>
    
      <category term="bug" scheme="https://x-nicolo.github.io/tags/bug/"/>
    
      <category term="python" scheme="https://x-nicolo.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pip无法正常使用解决办法</title>
    <link href="https://x-nicolo.github.io/2017/06/05/pip%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://x-nicolo.github.io/2017/06/05/pip无法正常使用解决办法/</id>
    <published>2017-06-05T09:17:50.000Z</published>
    <updated>2017-06-05T09:18:30.692Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>python -m pip install xxx<br>相当于import,叫做当做模块来启动</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;解决办法：&quot;&gt;&lt;a href=&quot;#解决办法：&quot; class=&quot;headerlink&quot; title=&quot;解决办法：&quot;&gt;&lt;/a&gt;解决办法：&lt;/h3&gt;&lt;p&gt;python -m pip install xxx&lt;br&gt;相当于import,叫做当做模块来启动&lt;/p&gt;

    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="bug" scheme="https://x-nicolo.github.io/tags/bug/"/>
    
      <category term="python" scheme="https://x-nicolo.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>eclipse导入文件乱码问题</title>
    <link href="https://x-nicolo.github.io/2017/06/05/eclipse%E5%AF%BC%E5%85%A5%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://x-nicolo.github.io/2017/06/05/eclipse导入文件乱码问题/</id>
    <published>2017-06-05T09:15:51.000Z</published>
    <updated>2017-06-05T09:17:13.251Z</updated>
    
    <content type="html"><![CDATA[<p>首先导入的文件成为了乱码是因为workspace的编码方式不对<br>linux下默认编码是UTF-8，windows的是GBK，</p>
<p>那么怎么修改workspace的编码方式呢<br>很简单在window—-preference—workspace可以设置只要把编码改成utf-8就可以喽</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先导入的文件成为了乱码是因为workspace的编码方式不对&lt;br&gt;linux下默认编码是UTF-8，windows的是GBK，&lt;/p&gt;
&lt;p&gt;那么怎么修改workspace的编码方式呢&lt;br&gt;很简单在window—-preference—workspace可以设置只要把
    
    </summary>
    
      <category term="编程" scheme="https://x-nicolo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="bug" scheme="https://x-nicolo.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>三季人</title>
    <link href="https://x-nicolo.github.io/2017/06/03/%E4%B8%89%E5%AD%A3%E4%BA%BA/"/>
    <id>https://x-nicolo.github.io/2017/06/03/三季人/</id>
    <published>2017-06-03T02:10:05.000Z</published>
    <updated>2017-06-03T02:41:40.241Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>夏虫不可以语冰，不做价值评断和道德审判。</p>
<hr>
<a id="more"></a>
<blockquote>
<p>早晨，子贡在大院门口打扫院子。有人来到，问子贡：“您是孔子吗？”<br>子贡答道：“有什么事需要向我们老师请教？”<br>“我想请教关于时间的问题？”<br>“这个问题我知道，可以回答你”<br>“那你说说一年有几季？”<br>“四季。”子贡笑答。<br>“不对，一年只有三季！”<br>“四季！！”  、<br>“三季！！”<br>“四季！！！”子贡理直气壮。<br>“三季！！！”来人毫不示弱。<br>然后就争论不止，一直争论到中午也没消停。<br>孔子听到声音，从院内出来，子贡上前讲明原委，让孔子评定。<br>孔子先是不答，观察一阵后说：“一年的确只有三季。”<br>来人听此，大笑而去。<br>待来人走后，子贡忙问老师：“这与您所教有别啊，且一年的确有四季啊！”<br>“这一年到底应是几季？”孔子答：“四季”<br>子贡不解。孔子继而说道：“这时和刚才不同，方才那人一身绿衣。他分明是田间的蚱蜢。蚱蜢者，春天生，秋天亡，一生只经历过春、夏、秋三季，哪里见过冬天？所以在他的思维里，根本就没有‘冬季’这个概念。你跟这样的人那就是争上三天三夜也不会有结果的。你若不顺着他说，他能这么爽快就走吗？你虽然上了个小当，但却学到了莫大一个乖。”<br>说完，子贡立刻明白了。</p>
</blockquote>
<h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>大多数总是以社会大众心中对善恶的标准来看待周围的事物：“一件事情应该是什么样子”。<br>实则是在道德审判上也盲目从众。<br>知之为知之，是知也。<br>但并不是知无不言言无不尽才是最好的。</p>
<h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>哪些人是强势，哪些人是弱势，哪些值得同情，哪些不是好人。<br>从一开始对善恶都有一个预设，然后用各种的例子来说服自己和其他人。<br>根本没有脱离了程序正义以外的所谓实质正义。<br>站在不同的立场上，事情可能变得完全不同。</p>
<h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>道德本来就是一个见仁见智的东西。<br>大部分的道德标准，不算是与生俱来带有合理性的。<br>而是默认的一种规则，这种规则不一定是正确的。<br>道德不一定是理性的产物。</p>
<h3 id="四"><a href="#四" class="headerlink" title="四"></a>四</h3><p>最近听到一个朋友诉说了一些事情。<br>让我觉得生活真的好难，让自己快乐也许才是最重要的。<br>人也需要有独立思考的能力，这一点很重要。<br>并不是别人说风就是雨，要有自己的判断。</p>
<h3 id="五"><a href="#五" class="headerlink" title="五"></a>五</h3><p>快乐的前提是看待一切事物都能以积极的心态。<br>平常心，不抱怨，不争吵。<br>少做价值评断和道德审判。<br>不想自己也成为别人眼中的三季人。</p>
<h3 id="六"><a href="#六" class="headerlink" title="六"></a>六</h3><p>试着努力去体会所谓的精神。<br>好的生活习惯和积极的进取心态，知行合一。<br>说到做到才是执行力的最大体现。<br>嗯，我瘦了二十斤。</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;夏虫不可以语冰，不做价值评断和道德审判。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://x-nicolo.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="日常" scheme="https://x-nicolo.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
